{
	"info": {
		"_postman_id": "6ffe643e-d810-4b76-bf30-978740891378",
		"name": "Team5_APICollectors",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Program",
			"item": [
				{
					"name": "Create Program 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c78b3ed8-6e8a-4ec0-b95b-29f7b9b85dea",
								"exec": [
									"pm.test(\"Status code is 201\",  () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Check Status Text\", ()=>{\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"//Validate Header\r",
									"pm.test(\"Content-Type header is present\", ()=>{\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									"//Created variable to strore response\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)\r",
									"\r",
									"//Setting enviornment variable \r",
									"pm.globals.set(\"ProgramId\", response.programId);\r",
									"pm.globals.set(\"programName\", response.programName);\r",
									"\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response).to.be.an(\"object\");\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"ProgramId\"));\r",
									"pm.expect(response.programName).to.eql(pm.variables.get(\"programName4\"));\r",
									"pm.expect(response.programStatus).to.eql(pm.variables.get(\"programStatus4\"));\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2dbf7753-abfb-440f-9979-0da3ae0ec832",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription4}}\",\r\n  \"programName\": \"{{programName4}}\",\r\n  \"programStatus\": \"{{programStatus4}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Get all Programs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "61712987-d6a2-4251-ad37-e18736b1ad76",
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Header\r",
									"pm.test(\"Content-Type header is present\", ()=>{\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "673482db-97f0-4e6b-ac91-544059d4945f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/allPrograms"
					},
					"response": []
				},
				{
					"name": "Create duplicate Program1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48b4aad7-5f63-4627-88f7-9e08b9c8db6e",
								"exec": [
									"pm.test(\"Status code is 400\",  () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"cannot create program , since already exists\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "64e4c71b-63fa-4e0e-9b17-4b1e412650db",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription4}}\",\r\n  \"programName\": \"{{programName4}}\",\r\n  \"programStatus\": \"{{programStatus4}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Update Program by Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a4ddca65-3089-4116-9469-24e557046bcf",
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.globals.set(\"programName4\", response.programName);\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response).to.be.an(\"object\");\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"ProgramId\"));\r",
									"pm.expect(response.programName).to.eql(pm.variables.get(\"programName4\"));\r",
									"pm.expect(response.programStatus).to.eql(pm.variables.get(\"programStatus4\"));\r",
									"});\r",
									"\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "56dde270-b007-46d5-bc7b-b22e2c91e86f",
								"exec": [
									"var NwprogramName2 = \"Jun23-APICollectors-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"NewprogramName1\",NwprogramName2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6ffdc880-0215-4bc6-9b64-35a83bb658b7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{UpdatepgmDesc}}\",\r\n  \"programId\": {{ProgramId}},\r\n  \"programName\": \"{{programName4}}\",\r\n  \"programStatus\": \"{{programStatus4}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/program/{{programName4}}"
					},
					"response": []
				},
				{
					"name": "Delete Program by Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21a7bf25-0cf8-4bbd-b876-816d07ffce4a",
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"deleted Successfully\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f38fdc0d-4775-42fd-8178-4ed8630064c3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogname/{{programName4}}"
					},
					"response": []
				},
				{
					"name": "Delete By Same Program Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "10a91b5f-27ff-4ae3-877e-84cc2c097ffa",
								"exec": [
									"pm.test(\"Status code is 404\",  () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"no record found with programName\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5c485aea-eaec-4cbc-adb0-4f03dc88911c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogname/{{programName4}}"
					},
					"response": []
				},
				{
					"name": "Create Program without ProgramStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e1712e3e-53f2-4e03-8b67-ce0bb5f22d07",
								"exec": [
									"pm.test(\"Status code is 500\",  () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c8a20e30-2d09-4cc3-ba52-cc807ce8e05f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription3}}\",\r\n  \"programName\": \"{{programName3}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create Program without Program Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1cedd76e-a26d-4e74-8c36-27f7828e78e1",
								"exec": [
									"pm.test(\"Status code is 500\",  () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "19b338de-6b38-45ad-babc-399772b1119d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription3}}\",\r\n  \"programStatus\": \"{{programStatus3}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create Program 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2132810b-c751-4c3d-91e0-7395706e22cf",
								"exec": [
									"pm.test(\"Status code is 201\",  () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Check Status Text\", ()=>{\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"//Validate Header\r",
									"pm.test(\"Content-Type header is present\", ()=>{\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)\r",
									"\r",
									"//pm.globals.set(\"programStatus\", response.programStatus);\r",
									"pm.globals.set(\"programName\", response.programName);\r",
									"pm.globals.set(\"programId\", response.programId);\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response).to.be.an(\"object\");\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"programId\"));\r",
									"pm.expect(response.programName).to.eql(pm.variables.get(\"programName3\"));\r",
									"pm.expect(response.programStatus).to.eql(pm.variables.get(\"programStatus3\"));\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "72464109-560a-4718-b92d-c78405ae4d71",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription3}}\",\r\n  \"programName\": \"{{programName3}}\",\r\n  \"programStatus\": \"{{programStatus3}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Get Program By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a38f871-3aba-4c52-94ef-10de8633029b",
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ff34e3d0-5542-454b-932c-d3b8e39e2bc3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{BaseURL}}/programs/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Update Program By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a00bad2-7860-4e12-af09-5592ccd2ba98",
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.globals.set(\"programName\", response.programName);\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response).to.be.an(\"object\");\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"programId\"));\r",
									"pm.expect(response.programName).to.eql(pm.variables.get(\"programName3\"));\r",
									"pm.expect(response.programStatus).to.eql(pm.variables.get(\"programStatus3\"));\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fefc7d11-6d39-4148-99d7-5db2878787b5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{UpdatebyidDesc}}\",\r\n  \"programName\": \"{{programName3}}\",\r\n  \"programStatus\": \"{{programStatus3}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/putprogram/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Update with missing Program Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09b805c3-43df-4a7f-9789-407224310dbe",
								"exec": [
									"pm.test(\"Status code is 400\",  () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "831c12c0-e572-4f12-8f95-6ef24ffac234",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription3}}\",\r\n  \"programStatus\": \"{{programStatus3}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/putprogram/{{programName3}}"
					},
					"response": []
				},
				{
					"name": "Update with missing Program Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "135836d6-2939-4294-92c9-a3559d6df8eb",
								"exec": [
									"pm.test(\"Status code is 400\",  () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "470b9379-eaf6-4dfe-a463-8f4d04711e13",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription3}}\",\r\n  \"programName\": \"{{programName3}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/putprogram/{{programName3}}"
					},
					"response": []
				},
				{
					"name": "Update Program by Invalid Program ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "360c76d4-7e5a-489f-8676-860a42426e61",
								"exec": [
									"pm.test(\"Status code is 404\",  () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"program with id \"+ pm.variables.get(\"InvalidprogramId\") +\" not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "894abbdb-23aa-4d90-8215-7e03b10eae32",
								"exec": [
									"pm.variables.set(\"InvalidprogramId\", 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "63f79cd9-3841-4cee-baec-b7795e5880a4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription3}}\",\r\n  \"programName\": \"{{programName3}}\",\r\n  \"programStatus\": \"{{programStatus3}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/putprogram/:programId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"putprogram",
								":programId"
							],
							"variable": [
								{
									"id": "35b69a3c-fdc4-4a64-8212-3dbd2aeb6def",
									"key": "programId",
									"value": "{{InvalidprogramId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Program By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c904cb59-6e02-4ca0-b975-09f837e561d8",
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"deleted Successfully\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1b1930d9-f57c-483b-a499-3fd4eec39e1b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogid/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Delete By same Program ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82d36cab-3de2-4251-937d-51763f20d816",
								"exec": [
									"pm.test(\"Status code is 404\",  () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"no record found with programId \" +pm.variables.get(\"programId\"));\r",
									"});\r",
									"\r",
									"pm.globals.unset(\"ProgramId\");\r",
									"pm.globals.unset(\"programName\");\r",
									"pm.globals.unset(\"NewprogramName2\");\r",
									"pm.globals.unset(\"programId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ec82e74f-00ed-4efc-bb6a-955f15a63671",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogid/{{programId}}"
					},
					"response": []
				}
			],
			"id": "973fc1ff-2f99-487d-bce9-1b483ed00635"
		},
		{
			"name": "Batch",
			"item": [
				{
					"name": "Create New Program for Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1edfe330-2a0b-4386-aa83-adb78287fa05",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 201\", ()=>{\r",
									"pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test(\"Check Status Text\", ()=>{\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"//Validate Header\r",
									"pm.test(\"Content-Type header is present\", ()=>{\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									"//Created variable to strore response\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)\r",
									"\r",
									"//Setting enviornment variable \r",
									"pm.environment.set(\"programId\", response.programId);\r",
									"pm.environment.set(\"programName\", response.programName);\r",
									"\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response).to.be.an(\"object\");\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"programId\"));\r",
									"pm.expect(response.programName).to.eql(pm.variables.get(\"programNamebatch\"));\r",
									"pm.expect(response.programStatus).to.eql(pm.variables.get(\"programStatus\"));\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "db91388e-02da-403a-a243-e8998cee6657",
								"exec": [
									"var CrprogramName = \"Jun23-APICollectors-SDET\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"programNamebatch\",CrprogramName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "44892cad-6e0b-4b12-8659-00ec4092205f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\":\"{{programDescriptionbatch}}\",\r\n  \"programName\":  \"{{programNamebatch}}\",\r\n  \"programStatus\": \"{{programStatusbatch}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create New Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4e2f9b6-1ad0-4b1c-b200-97e95c9b641b",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 201\", ()=> {\r",
									"pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test(\"Check Status Text\", ()=>{\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"//Validate Header\r",
									"pm.test(\"Content-Type header is present\", ()=>{\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									"//create variable for response body\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)\r",
									"\r",
									"//Create enviornment variables\r",
									"pm.environment.set(\"batchId\", response.batchId);\r",
									"pm.environment.set(\"batchName\", response.batchName);\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"programId\"));\r",
									"pm.expect(response.programName).to.be.eql(pm.variables.get(\"programNamebatch\"));\r",
									"pm.expect(response.batchStatus).to.be.eql(pm.variables.get(\"batchStatus\"));\r",
									"pm.expect(response.batchName).to.be.eql(pm.variables.get(\"batchName\"));\r",
									"pm.expect(response.batchDescription).to.be.eql(pm.variables.get(\"batchDescription\"));\r",
									"pm.expect(response.batchId).to.be.eql(pm.variables.get(\"batchId\"));\r",
									"});\r",
									"\r",
									"console.log;\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome10\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"batchId\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"batchName\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"integer\"\r",
									"                },\r",
									"                \"batchDescription\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"batchStatus\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"batchNoOfClasses\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"programId\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"programName\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"batchDescription\",\r",
									"                \"batchId\",\r",
									"                \"batchName\",\r",
									"                \"batchNoOfClasses\",\r",
									"                \"batchStatus\",\r",
									"                \"programId\",\r",
									"                \"programName\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.expect(tv4.validate(response,schema)).to.be.true\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5ee74b9b-6b05-41e2-a47d-02670ca85794",
								"exec": [
									"var CrbatchName = pm.variables.get(\"programNamebatch\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"batchName\",CrbatchName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5771c39d-61d2-4665-8ac5-b4ab8a06f908",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Get All Batches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"\r",
									"//Validate Header\r",
									"pm.test(\"Content-Type header is present\", ()=>{\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome10\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"batchId\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"batchName\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"integer\"\r",
									"                },\r",
									"                \"batchDescription\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"batchStatus\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"batchNoOfClasses\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"programId\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"programName\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"batchDescription\",\r",
									"                \"batchId\",\r",
									"                \"batchName\",\r",
									"                \"batchNoOfClasses\",\r",
									"                \"batchStatus\",\r",
									"                \"programId\",\r",
									"                \"programName\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.expect(tv4.validate(pm.response,schema))\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "dbede399-800d-41e2-823f-dd85e23edeff"
							}
						}
					],
					"id": "72c6a606-43c8-4df2-9e46-2eb3194e8dd6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Create Duplicate Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Program \" + pm.environment.get(\"programName\") + \" with Batch-\" + pm.environment.get(\"batchName\") + \" already exists: ; Please give a different batch Name or Choose a different Program\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "7b7da669-3a1c-4bd1-8236-eed02a9b9b01"
							}
						}
					],
					"id": "9538b678-026e-4d76-b021-7c008f54c74f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch without BatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Body matches string\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch Name is mandatory\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "bd0cd1f0-81e6-4246-a902-690d5053b1ae"
							}
						}
					],
					"id": "b8a54012-c705-494d-adba-968f3b3c797b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch with integer BatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 201\", ()=> {\r",
									"pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"//create variable for response body\r",
									"const response = pm.response.json();\r",
									"\r",
									"//Create enviornment variables\r",
									"pm.environment.set(\"batchId1\", response.batchId);"
								],
								"type": "text/javascript",
								"id": "cf9104ef-7376-4b23-8bd3-a3d31cfd7072"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var NumbatchName = pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"IntbatchName\",NumbatchName);"
								],
								"type": "text/javascript",
								"id": "f7b33d32-c397-416a-83c7-6172096aa2bf"
							}
						}
					],
					"id": "e6c01ddf-8da0-4df4-b373-a4267489a2cf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\":{{IntbatchName}} ,\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Delete integer Batch name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\" deleted Successfully\");\r",
									"});\r",
									"\r",
									"pm.environment.unset(\"batchId1\");"
								],
								"type": "text/javascript",
								"id": "793f7e40-3c48-4f69-b275-bacdf0cfb420"
							}
						}
					],
					"id": "6efe52f6-dd68-4719-92f8-7466e69001c7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Batch without ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\" ProgramId field is needed; It should be a positive number \");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b8523408-c284-4d69-a87a-1ec8f4f8690a"
							}
						}
					],
					"id": "4fe1668b-aa20-44e4-b075-8800416bb11a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch negative ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 404\", ()=> {\r",
									"pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Program not found with Id : \" + pm.variables.get(\"NegprogramId\") + \" \");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "88134f68-9c16-44bb-add0-5ff5ebb0e34f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"NegprogramId\", -3);"
								],
								"type": "text/javascript",
								"id": "640a4e4c-4685-496e-9b67-0d7f7f1f00d5"
							}
						}
					],
					"id": "5cc601ff-defd-4874-8bca-d8d7e9c976f2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{NegprogramId}}\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch without Batch Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch status is needed\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "e441b20d-38e0-41a0-9f82-b1c262f9133a"
							}
						}
					],
					"id": "a720d3c9-399e-4dac-850c-564bd0286ba1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch with integer Batch Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 201\", ()=> {\r",
									"pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"//create variable for response body\r",
									"const response = pm.response.json();\r",
									"\r",
									"//Create enviornment variables\r",
									"pm.environment.set(\"batchId1\", response.batchId);"
								],
								"type": "text/javascript",
								"id": "d28ac0ce-e6a0-451c-bb5e-af9c914ab5c3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var NbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"NewbatchName\",NbatchName);\r",
									"\r",
									"var NbatchStatus = pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"NewbatchStatus\",NbatchStatus);"
								],
								"type": "text/javascript",
								"id": "b70bf3f2-5f25-47a7-90e0-e861ec68c71f"
							}
						}
					],
					"id": "fc9d237c-6826-4181-83de-f6c6f2ff043a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{NewbatchName}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": {{NewbatchStatus}},\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Delete integer Batch status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\" deleted Successfully\");\r",
									"});\r",
									"\r",
									"pm.environment.unset(\"batchId1\");"
								],
								"type": "text/javascript",
								"id": "c8a4475e-8bcc-4675-866b-71ab7a40b46c"
							}
						}
					],
					"id": "243ff227-8cd5-4948-ac6e-be8c8c473917",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Batch without NoOfClasses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\" No of Classes is needed; It should be a positive number \");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "02e5f1f3-1f66-4a99-8217-e8c0b6bc97a2"
							}
						}
					],
					"id": "d9ef6de3-1fd8-47b6-a126-2834e6548a17",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch with String NoOfClasses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})"
								],
								"type": "text/javascript",
								"id": "09071692-6672-4a5f-9418-836d2ed6e221"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"StringNoOfClasses\", \"three\");"
								],
								"type": "text/javascript",
								"id": "2aef032d-8afa-4f44-a6ef-9b60ed9fa67e"
							}
						}
					],
					"id": "a37fab46-300c-4be7-b4bd-d58c03cd4462",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":\"{{StringNoOfClasses}}\",\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch negative NoOfClasses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\" No of Classes is needed; It should be a positive number \");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "9c73b66e-3c1f-4b22-979d-a89a63108af6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"NegNoOfClasses\", -3);"
								],
								"type": "text/javascript",
								"id": "f9dc80c8-447b-43a9-9412-9afe97f1dc11"
							}
						}
					],
					"id": "36933774-032a-4c37-a9d1-fb8277337e58",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{NegNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Get Batche by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//Created variable to strore response\r",
									"const response = pm.response.json();\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data type of the response\", ()=>{\r",
									"pm.expect(response).to.be.an(\"object\");\r",
									"pm.expect(response.batchId).to.be.an(\"number\");\r",
									"pm.expect(response.batchName).to.be.an(\"string\");\r",
									"pm.expect(response.batchDescription).to.be.an(\"string\");\r",
									"pm.expect(response.batchNoOfClasses).to.be.an(\"number\");\r",
									"pm.expect(response.batchStatus).to.be.an(\"string\");\r",
									"pm.expect(response.programId).to.be.an(\"number\");\r",
									"pm.expect(response.programName).to.be.an(\"string\");\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c017444e-9cb8-4eb6-b164-8fe0889247a4"
							}
						}
					],
					"id": "7bad0217-cf75-4502-8b5f-19b71b36e0b9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/batches/batchId/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Get Batche by Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 404\", ()=>{\r",
									"pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch not found with Id : \" +pm.variables.get(\"InvalidBatchId\") +\" \");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "7388aeab-5165-4e0e-a2ce-cf538c71fc87"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"InvalidBatchId\", 0);"
								],
								"type": "text/javascript",
								"id": "8132c8a2-e062-4e8e-b6d6-a0daa255d8de"
							}
						}
					],
					"id": "180fd34f-0f95-4b52-bb8b-7b5fa5968cca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/batches/batchId/:batchId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchId",
								":batchId"
							],
							"variable": [
								{
									"id": "52a575d5-a7bb-4fe5-b028-6acc0fdbae1b",
									"key": "batchId",
									"value": "{{InvalidBatchId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Batche by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"batchId\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"batchName\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchDescription\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchStatus\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchNoOfClasses\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"programId\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"programName\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"batchId\",\r",
									"      \"batchName\",\r",
									"      \"batchDescription\",\r",
									"      \"batchStatus\",\r",
									"      \"batchNoOfClasses\",\r",
									"      \"programId\",\r",
									"      \"programName\"\r",
									"    ]\r",
									"  }\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "2e54b993-0096-4cd9-826e-f7bd19b2fd82"
							}
						}
					],
					"id": "e7f4a4f5-7d68-484e-8ea6-9a46e150e2bd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/batches/batchName/{{batchName}}"
					},
					"response": []
				},
				{
					"name": "Get Batche by Invalid name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 404\", ()=>{\r",
									"pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"programBatch with id \" +pm.variables.get(\"InvalidBatchName\") +\" not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "44b9e2e3-6b5c-477f-b2e2-b49f8861c389"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"InvalidBatchName\", \"RRR\");"
								],
								"type": "text/javascript",
								"id": "9f4da709-33b8-4ae3-b71d-9416e73f32ee"
							}
						}
					],
					"id": "937afbeb-ef72-429c-88ea-29553518017a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/batches/batchName/:batchName",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchName",
								":batchName"
							],
							"variable": [
								{
									"id": "3db1614e-1615-4418-b99a-a8c1d462d716",
									"key": "batchName",
									"value": "{{InvalidBatchName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Batche by ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"batchId\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"batchName\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchDescription\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchStatus\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchNoOfClasses\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"programId\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"programName\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"batchId\",\r",
									"      \"batchName\",\r",
									"      \"batchDescription\",\r",
									"      \"batchStatus\",\r",
									"      \"batchNoOfClasses\",\r",
									"      \"programId\",\r",
									"      \"programName\"\r",
									"    ]\r",
									"  }\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "afcea64e-6df4-4f13-94b8-2c81c0daad9d"
							}
						}
					],
					"id": "104a42d3-4e44-42d9-9753-b1a3c66b6c71",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/batches/program/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Get Batche by Invalid ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 404\", ()=>{\r",
									"pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"batch with programId \" +pm.variables.get(\"InvalidProgramId\") +\" not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "70101124-2f4d-4730-9c4e-280ebf4b31db"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"InvalidProgramId\", 0);"
								],
								"type": "text/javascript",
								"id": "487f9fed-b30d-4158-8177-ae60ae5b9057"
							}
						}
					],
					"id": "ca3d4a3f-d5ec-4932-ba4a-473e26a8703e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/batches/program/:programId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"program",
								":programId"
							],
							"variable": [
								{
									"id": "4ac22a08-e09b-4b76-b4fb-1af04f403c06",
									"key": "programId",
									"value": "{{InvalidProgramId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d650e96-d6a7-44ca-bd2d-150995bc5d4d",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"programId\"));\r",
									"pm.expect(response.programName).to.be.eql(pm.variables.get(\"programNamebatch\"));\r",
									"pm.expect(response.batchStatus).to.be.eql(pm.variables.get(\"UpdtbatchStatus\"));\r",
									"pm.expect(response.batchName).to.be.eql(pm.variables.get(\"UpdtbatchName\"));\r",
									"pm.expect(response.batchDescription).to.be.eql(pm.variables.get(\"UpdtbatchDescription\"));\r",
									"pm.expect(response.batchId).to.be.eql(pm.variables.get(\"batchId\"));\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.expect(tv4.validate(response,schema)).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1e77a70a-a907-41a0-9071-f0b94b776fa2",
								"exec": [
									"var UpbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"UpdtbatchName\",UpbatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "809a5fcd-7402-4795-ba29-b33cb4fc2cdd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdtbatchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{UpdtbatchName}}\",\r\n  \"batchNoOfClasses\": {{UpdtbatchNoOfClasses}},\r\n  \"batchStatus\": \"{{UpdtbatchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update Batch without programID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 400\", ()=>{\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\" ProgramId field is needed; It should be a positive number \");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "68b1cb96-870f-410f-a725-9eb5adc351a4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// var UpbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"// pm.environment.set(\"UpdtbatchName\",UpbatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "a0602e09-33bc-46f0-8c27-adfc6480743a"
							}
						}
					],
					"id": "0f6bfa40-7c95-4735-b37a-f6b8f8b5c836",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdtbatchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{UpdtbatchName}}\",\r\n  \"batchNoOfClasses\": {{UpdtbatchNoOfClasses}},\r\n  \"batchStatus\": \"{{UpdtbatchStatus}}\",\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update Batch without batchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 400\", ()=>{\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch status is needed\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "a200271f-9312-4118-83dd-80b67ebdbbd5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// var UpbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"// pm.environment.set(\"UpdtbatchName\",UpbatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "7920352f-e24e-4406-9fe7-607ed5c48935"
							}
						}
					],
					"id": "21e952de-ee72-4ca5-b788-fa5ea73da44b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdtbatchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{UpdtbatchName}}\",\r\n  \"batchNoOfClasses\": {{UpdtbatchNoOfClasses}},\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update Batch without NoOfClass",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 400\", ()=>{\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\" No of Classes is needed; It should be a positive number \");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d0477cc8-fea4-4ec0-b775-25347658f217"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// var UpbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"// pm.environment.set(\"UpdtbatchName\",UpbatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "fd709495-f1c9-4e7c-817a-d773439f198d"
							}
						}
					],
					"id": "9d324a6c-a14c-45b2-af61-a8734e9a3f17",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdtbatchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{UpdtbatchName}}\",\r\n  \"batchStatus\": \"{{UpdtbatchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update Batch without BatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 400\", ()=>{\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch Name is mandatory\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b97e6d86-0c5a-4486-96ad-c912f8505e46"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// var UpbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"// pm.environment.set(\"UpdtbatchName\",UpbatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "1eb5aff4-5414-4fd2-a207-f424084fbdcc"
							}
						}
					],
					"id": "f699d178-c61f-44cf-b458-595192dd6c71",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdtbatchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchStatus\": \"{{UpdtbatchStatus}}\",\r\n  \"batchNoOfClasses\": {{UpdtbatchNoOfClasses}},\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"deleted Successfully\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5485efd5-9fdd-4b3a-ab99-4b4dc0988470"
							}
						}
					],
					"id": "bd87c043-6338-4e4f-834b-436c385fd5b3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch by same ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 404\", ()=>{\r",
									"pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch not found with Id : \" +pm.environment.get(\"batchId\") +\" \");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d806eb58-c786-4c30-a2dd-6b4d7459d3ae"
							}
						}
					],
					"id": "3654c236-2c6c-431d-adb9-0e320d36a691",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Delete Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Messageg\", () => {\r",
									"    pm.expect(pm.response.text()).to.contains(\"deleted Successfully\");\r",
									"});\r",
									"\r",
									"//Delete created variable\r",
									"pm.environment.unset(\"programId\");\r",
									"pm.environment.unset(\"programName\");"
								],
								"type": "text/javascript",
								"id": "e3648827-c554-45e5-9a4c-e1019f694f7f"
							}
						}
					],
					"id": "76da0dfb-ee48-4fdc-a389-e3cc32e4caf4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogid/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Get deleted batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 404\", ()=>{\r",
									"pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch not found with Id : \" +pm.environment.get(\"batchId\") +\" \");\r",
									"});\r",
									"\r",
									"\r",
									"//Delete created variable\r",
									"pm.environment.unset(\"batchId\");\r",
									"pm.environment.unset(\"batchName\");\r",
									"pm.environment.unset(\"UpdtbatchName\");\r",
									"pm.environment.unset(\"NewbatchName\");\r",
									"pm.environment.unset(\"NewbatchStatus\");\r",
									"pm.environment.unset(\"IntbatchName\");"
								],
								"type": "text/javascript",
								"id": "0e671c3c-2912-477a-b598-2841e42f835a"
							}
						}
					],
					"id": "a36d1758-e2e5-445d-afb4-b972ad01c3e4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/batches/batchId/{{batchId}}"
					},
					"response": []
				}
			],
			"id": "8fd511f7-d995-4dab-b34e-e8a33a706302",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "238a9399-563c-476e-9248-5e95c133e81f"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "5fe0c5a5-5dc5-406b-a23a-227675021cb7"
					}
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Create new Admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.expect(pm.response.status).to.eql('Created');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"     \"required\": [",
									"      \"userId\",",
									"      \"userFirstName\",",
									"      \"userLastName\",",
									"      \"userMiddleName\",",
									"      \"userPhoneNumber\",",
									"      \"userLocation\",",
									"      \"userTimeZone\",",
									"      \"userLinkedinUrl\",",
									"      \"userEduUg\",",
									"      \"userEduPg\",",
									"      \"userComments\",",
									"      \"userVisaStatus\"",
									"    ],",
									"    \"properties\": {",
									"        \"userId\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userFirstName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLastName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userMiddleName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userPhoneNumber\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"userLocation\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userTimeZone\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLinkedinUrl\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduUg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduPg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userComments\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userVisaStatus\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test4 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test5 - Validate userId starts with U",
									"pm.test(\"Auto-created userId should have U\", () => {",
									"    pm.expect(responseJson.userId).to.contain('U');",
									"});",
									"",
									"// Test6 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.userFirstName).to.eql(pm.variables.get(\"adminUserFirstName\"));",
									"    pm.expect(responseJson.userLastName).to.eql(pm.variables.get(\"userLastName\"));",
									"    pm.expect(responseJson.userMiddleName).to.eql(pm.variables.get(\"userMiddleName\"));",
									"    pm.expect(responseJson.userPhoneNumber).to.eql(parseInt(pm.environment.get(\"userPhoneNumber\")));",
									"    pm.expect(responseJson.userLocation).to.eql(pm.variables.get(\"userLocation\"));",
									"    pm.expect(responseJson.userTimeZone).to.eql(pm.variables.get(\"userTimeZone\"));",
									"    pm.expect(responseJson.userLinkedinUrl).to.eql(pm.variables.get(\"userLinkedinUrl\"));",
									"    pm.expect(responseJson.userEduUg).to.eql(pm.variables.get(\"userEduUg\"));",
									"    pm.expect(responseJson.userEduPg).to.eql(pm.variables.get(\"userEduPg\"));",
									"    pm.expect(responseJson.userComments).to.eql(pm.variables.get(\"userComments\"));",
									"    pm.expect(responseJson.userVisaStatus).to.eql(pm.variables.get(\"userVisaStatus\"));",
									"});",
									"",
									"// Set global variables from response, to be used by other requests",
									"if(responseJson)",
									"{",
									"    pm.environment.set(\"adminUserId\", responseJson.userId);",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "cc7eb0ef-1628-438a-8296-30fc264e9533"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"adminUserFirstName\") + randomNum;",
									"pm.variables.set(\"adminUserFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "4ca14796-f26d-48be-b2a9-ad46e34b9a6b"
							}
						}
					],
					"id": "67548460-44e0-4e8e-9b33-25f19302c172",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{adminUserFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Get Admin User info by Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f2a26ff9-8b3c-4dcc-ac42-40b8b9df4189"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"items\": {",
									"      \"type\": \"object\",",
									"      \"required\": [",
									"          \"userRoleId\",",
									"          \"user\",",
									"          \"role\",",
									"          \"batches\",",
									"          \"userRoleStatus\"",
									"      ],",
									"      \"properties\": {",
									"          \"userRoleId\": {",
									"              \"type\": \"integer\"",
									"          },",
									"          \"user\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"userId\",",
									"                  \"userFirstName\",",
									"                  \"userLastName\",",
									"                  \"userPhoneNumber\",",
									"                  \"userTimeZone\",",
									"                  \"userVisaStatus\"",
									"              ],",
									"              \"properties\": {",
									"                  \"userId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userFirstName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userLastName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userPhoneNumber\": {",
									"                      \"type\": \"integer\"",
									"                  },",
									"                  \"userTimeZone\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userVisaStatus\": {",
									"                      \"type\": \"string\"",
									"                  }",
									"                }",
									"          },",
									"          \"role\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"roleId\",",
									"                  \"roleName\",",
									"                  \"roleDesc\",",
									"                  \"creationTime\",",
									"                  \"lastModTime\",",
									"                  \"hibernateLazyInitializer\"",
									"              ],",
									"              \"properties\": {",
									"                  \"roleId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleDesc\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"creationTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"lastModTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"hibernateLazyInitializer\": {",
									"                      \"type\": \"object\"",
									"                  }",
									"              }",
									"           },",
									"          \"batches\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"          },",
									"          \"userRoleStatus\": {",
									"              \"type\": \"string\"",
									"          }",
									"      }",
									"  }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson[0].user.userId).to.eql(pm.environment.get(\"adminUserId\"));",
									"    pm.expect(responseJson[0].user.userFirstName).to.eql(pm.variables.get(\"adminUserFirstName\"));",
									"    pm.expect(responseJson[0].user.userLastName).to.eql(pm.variables.get(\"userLastName\"));",
									"    pm.expect(responseJson[0].user.userMiddleName).to.eql(pm.variables.get(\"userMiddleName\"));",
									"    pm.expect(responseJson[0].user.userPhoneNumber).to.eql(parseInt(pm.environment.get(\"userPhoneNumber\")));",
									"    pm.expect(responseJson[0].user.userLocation).to.eql(pm.variables.get(\"userLocation\"));",
									"    pm.expect(responseJson[0].user.userTimeZone).to.eql(pm.variables.get(\"userTimeZone\"));",
									"    pm.expect(responseJson[0].user.userLinkedinUrl).to.eql(pm.variables.get(\"userLinkedinUrl\"));",
									"    pm.expect(responseJson[0].user.userEduUg).to.eql(pm.variables.get(\"userEduUg\"));",
									"    pm.expect(responseJson[0].user.userEduPg).to.eql(pm.variables.get(\"userEduPg\"));",
									"    pm.expect(responseJson[0].user.userComments).to.eql(pm.variables.get(\"userComments\"));",
									"    pm.expect(responseJson[0].user.userVisaStatus).to.eql(pm.variables.get(\"userVisaStatus\"));",
									"    pm.expect(responseJson[0].role.roleId).to.eql(pm.variables.get(\"roleId\"));",
									"    pm.expect(responseJson[0].userRoleStatus).to.eql(pm.variables.get(\"userRoleStatus\"));",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "408293e1-e7ff-4152-ae97-fa6afd34581f"
							}
						}
					],
					"id": "f2bb46ae-feb6-425a-b8d5-4f05528f42fd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userId"
							],
							"variable": [
								{
									"id": "6ec01302-e80a-4439-8c24-e1028d31044b",
									"key": "userId",
									"value": "{{adminUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Staff user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.expect(pm.response.status).to.eql('Created');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"      \"userId\",",
									"      \"userFirstName\",",
									"      \"userLastName\",",
									"      \"userMiddleName\",",
									"      \"userPhoneNumber\",",
									"      \"userLocation\",",
									"      \"userTimeZone\",",
									"      \"userLinkedinUrl\",",
									"      \"userEduUg\",",
									"      \"userEduPg\",",
									"      \"userComments\",",
									"      \"userVisaStatus\"",
									"    ],",
									"    \"properties\": {",
									"        \"userId\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userFirstName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLastName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userMiddleName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userPhoneNumber\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"userLocation\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userTimeZone\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLinkedinUrl\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduUg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduPg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userComments\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userVisaStatus\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test4 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test5 - Validate userId starts with U",
									"pm.test(\"Auto-created userId should have U\", () => {",
									"    pm.expect(responseJson.userId).to.contain('U');",
									"});",
									"",
									"// Test6 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.userFirstName).to.eql(pm.variables.get(\"staffUserFirstName\"));",
									"    pm.expect(responseJson.userLastName).to.eql(pm.variables.get(\"userLastName\"));",
									"    pm.expect(responseJson.userMiddleName).to.eql(pm.variables.get(\"userMiddleName\"));",
									"    pm.expect(responseJson.userPhoneNumber).to.eql(parseInt(pm.environment.get(\"userPhoneNumber\")));",
									"    pm.expect(responseJson.userLocation).to.eql(pm.variables.get(\"userLocation\"));",
									"    pm.expect(responseJson.userTimeZone).to.eql(pm.variables.get(\"userTimeZone\"));",
									"    pm.expect(responseJson.userLinkedinUrl).to.eql(pm.variables.get(\"userLinkedinUrl\"));",
									"    pm.expect(responseJson.userEduUg).to.eql(pm.variables.get(\"userEduUg\"));",
									"    pm.expect(responseJson.userEduPg).to.eql(pm.variables.get(\"userEduPg\"));",
									"    pm.expect(responseJson.userComments).to.eql(pm.variables.get(\"userComments\"));",
									"    pm.expect(responseJson.userVisaStatus).to.eql(pm.variables.get(\"userVisaStatus\"));",
									"});",
									"",
									"// Set global variables from response, to be used by other requests",
									"if(responseJson)",
									"{",
									"    pm.environment.set(\"staffUserId\", responseJson.userId);",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "e0ebf970-564d-4cc0-a8f1-75ebd04afec8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"staffUserFirstName\") + randomNum;",
									"pm.variables.set(\"staffUserFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "cd819dc4-d5b6-4ed9-8f6b-09fad68e9bbe"
							}
						}
					],
					"id": "6265772f-f0b6-4d7b-8bea-581a769fe033",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{staffUserFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Get All Staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"items\": {",
									"      \"type\": \"object\",",
									"      \"required\": [",
									"          \"userRoleId\",",
									"          \"user\",",
									"          \"role\",",
									"          \"batches\",",
									"          \"userRoleStatus\"",
									"      ],",
									"      \"properties\": {",
									"          \"userRoleId\": {",
									"              \"type\": \"integer\"",
									"          },",
									"          \"user\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"userId\",",
									"                  \"userFirstName\",",
									"                  \"userLastName\",",
									"                  \"userPhoneNumber\",",
									"                  \"userTimeZone\",",
									"                  \"userVisaStatus\",",
									"                  \"hibernateLazyInitializer\"",
									"              ],",
									"              \"properties\": {",
									"                  \"userId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userFirstName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userLastName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userPhoneNumber\": {",
									"                      \"type\": \"integer\"",
									"                  },",
									"                  \"userTimeZone\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userVisaStatus\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"hibernateLazyInitializer\": {",
									"                      \"type\": \"object\"",
									"                  }",
									"                }",
									"          },",
									"          \"role\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"roleId\",",
									"                  \"roleName\",",
									"                  \"roleDesc\",",
									"                  \"creationTime\",",
									"                  \"lastModTime\",",
									"                  \"hibernateLazyInitializer\"",
									"              ],",
									"              \"properties\": {",
									"                  \"roleId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleDesc\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"creationTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"lastModTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"hibernateLazyInitializer\": {",
									"                      \"type\": \"object\"",
									"                  }",
									"              }",
									"           },",
									"          \"batches\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"          },",
									"          \"userRoleStatus\": {",
									"              \"type\": \"string\"",
									"          }",
									"      }",
									"  }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Filter staff user created earlier",
									"if(responseJson.user)",
									"{",
									"    const staffUser = responseJson.filter((user) => user.user.userId === pm.environment.get(\"staffUserId\"));",
									"",
									"    // Test5 - Validate Staff user",
									"    pm.test(\"Staff user created should be in All users\", () => {",
									"        pm.expect(staffUser.length).to.eql(1);",
									"        pm.expect(staffUser[0]).to.be.an('object');",
									"    });",
									"}",
									"else",
									"{",
									"    pm.test(\"Staff user found\", () => {",
									"        pm.expect(responseJson.user).to.be.true;",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"id": "7b61cb9f-3acd-403c-96a1-222783aec92f"
							}
						}
					],
					"id": "b52da5a8-5fcb-4b93-9fe2-6134ae182fbd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/users/users/getAllStaff"
					},
					"response": []
				},
				{
					"name": "Get Staff User info by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"items\": {",
									"      \"type\": \"object\",",
									"      \"required\": [",
									"          \"userRoleId\",",
									"          \"user\",",
									"          \"role\",",
									"          \"batches\",",
									"          \"userRoleStatus\"",
									"      ],",
									"      \"properties\": {",
									"          \"userRoleId\": {",
									"              \"type\": \"integer\"",
									"          },",
									"          \"user\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"userId\",",
									"                  \"userFirstName\",",
									"                  \"userLastName\",",
									"                  \"userPhoneNumber\",",
									"                  \"userTimeZone\",",
									"                  \"userVisaStatus\"",
									"              ],",
									"              \"properties\": {",
									"                  \"userId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userFirstName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userLastName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userPhoneNumber\": {",
									"                      \"type\": \"integer\"",
									"                  },",
									"                  \"userTimeZone\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userVisaStatus\": {",
									"                      \"type\": \"string\"",
									"                  }",
									"                }",
									"          },",
									"          \"role\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"roleId\",",
									"                  \"roleName\",",
									"                  \"roleDesc\",",
									"                  \"creationTime\",",
									"                  \"lastModTime\",",
									"                  \"hibernateLazyInitializer\"",
									"              ],",
									"              \"properties\": {",
									"                  \"roleId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleDesc\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"creationTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"lastModTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"hibernateLazyInitializer\": {",
									"                      \"type\": \"object\"",
									"                  }",
									"              }",
									"           },",
									"          \"batches\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"          },",
									"          \"userRoleStatus\": {",
									"              \"type\": \"string\"",
									"          }",
									"      }",
									"  }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson[0].user.userId).to.eql(pm.environment.get(\"staffUserId\"));",
									"    pm.expect(responseJson[0].user.userFirstName).to.eql(pm.variables.get(\"staffUserFirstName\"));",
									"    pm.expect(responseJson[0].user.userLastName).to.eql(pm.variables.get(\"userLastName\"));",
									"    pm.expect(responseJson[0].user.userMiddleName).to.eql(pm.variables.get(\"userMiddleName\"));",
									"    pm.expect(responseJson[0].user.userPhoneNumber).to.eql(parseInt(pm.environment.get(\"userPhoneNumber\")));",
									"    pm.expect(responseJson[0].user.userLocation).to.eql(pm.variables.get(\"userLocation\"));",
									"    pm.expect(responseJson[0].user.userTimeZone).to.eql(pm.variables.get(\"userTimeZone\"));",
									"    pm.expect(responseJson[0].user.userLinkedinUrl).to.eql(pm.variables.get(\"userLinkedinUrl\"));",
									"    pm.expect(responseJson[0].user.userEduUg).to.eql(pm.variables.get(\"userEduUg\"));",
									"    pm.expect(responseJson[0].user.userEduPg).to.eql(pm.variables.get(\"userEduPg\"));",
									"    pm.expect(responseJson[0].user.userComments).to.eql(pm.variables.get(\"userComments\"));",
									"    pm.expect(responseJson[0].user.userVisaStatus).to.eql(pm.variables.get(\"userVisaStatus\"));",
									"    pm.expect(responseJson[0].role.roleId).to.eql(pm.variables.get(\"roleId\"));",
									"    pm.expect(responseJson[0].userRoleStatus).to.eql(pm.variables.get(\"userRoleStatus\"));",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "64632aaf-f198-4ca2-b155-76dcb08df330"
							}
						}
					],
					"id": "64b38b50-3ed8-4c46-bec9-cd290d38d529",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userId"
							],
							"variable": [
								{
									"id": "dd98e803-8257-4020-8245-47d4b96c9163",
									"key": "userId",
									"value": "{{staffUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Student user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.expect(pm.response.status).to.eql('Created');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"      \"userId\",",
									"      \"userFirstName\",",
									"      \"userLastName\",",
									"      \"userMiddleName\",",
									"      \"userPhoneNumber\",",
									"      \"userLocation\",",
									"      \"userTimeZone\",",
									"      \"userLinkedinUrl\",",
									"      \"userEduUg\",",
									"      \"userEduPg\",",
									"      \"userComments\",",
									"      \"userVisaStatus\"",
									"    ],",
									"    \"properties\": {",
									"        \"userId\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userFirstName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLastName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userMiddleName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userPhoneNumber\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"userLocation\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userTimeZone\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLinkedinUrl\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduUg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduPg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userComments\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userVisaStatus\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test4 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test5 - Validate userId starts with U",
									"pm.test(\"Auto-created userId should have U\", () => {",
									"    pm.expect(responseJson.userId).to.contain('U');",
									"});",
									"",
									"// Test6 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.userFirstName).to.eql(pm.variables.get(\"studentUserFirstName\"));",
									"    pm.expect(responseJson.userLastName).to.eql(pm.variables.get(\"userLastName\"));",
									"    pm.expect(responseJson.userMiddleName).to.eql(pm.variables.get(\"userMiddleName\"));",
									"    pm.expect(responseJson.userPhoneNumber).to.eql(parseInt(pm.environment.get(\"userPhoneNumber\")));",
									"    pm.expect(responseJson.userLocation).to.eql(pm.variables.get(\"userLocation\"));",
									"    pm.expect(responseJson.userTimeZone).to.eql(pm.variables.get(\"userTimeZone\"));",
									"    pm.expect(responseJson.userLinkedinUrl).to.eql(pm.variables.get(\"userLinkedinUrl\"));",
									"    pm.expect(responseJson.userEduUg).to.eql(pm.variables.get(\"userEduUg\"));",
									"    pm.expect(responseJson.userEduPg).to.eql(pm.variables.get(\"userEduPg\"));",
									"    pm.expect(responseJson.userComments).to.eql(pm.variables.get(\"userComments\"));",
									"    pm.expect(responseJson.userVisaStatus).to.eql(pm.variables.get(\"userVisaStatus\"));",
									"});",
									"",
									"// Set global variables from response, to be used by other requests",
									"if(responseJson)",
									"{",
									"    pm.environment.set(\"studentUserId\", responseJson.userId);",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "6b1b96ef-991f-497e-8f47-6008f3b34255"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"studentUserFirstName\") + randomNum;",
									"pm.variables.set(\"studentUserFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "168dc163-10e5-43c8-9192-3ee80fce24dc"
							}
						}
					],
					"id": "232f519e-a503-4192-b8aa-66afaa6a9e28",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{studentUserFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Get Student User info by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"items\": {",
									"      \"type\": \"object\",",
									"      \"required\": [",
									"          \"userRoleId\",",
									"          \"user\",",
									"          \"role\",",
									"          \"batches\",",
									"          \"userRoleStatus\"",
									"      ],",
									"      \"properties\": {",
									"          \"userRoleId\": {",
									"              \"type\": \"integer\"",
									"          },",
									"          \"user\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"userId\",",
									"                  \"userFirstName\",",
									"                  \"userLastName\",",
									"                  \"userPhoneNumber\",",
									"                  \"userTimeZone\",",
									"                  \"userVisaStatus\"",
									"              ],",
									"              \"properties\": {",
									"                  \"userId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userFirstName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userLastName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userPhoneNumber\": {",
									"                      \"type\": \"integer\"",
									"                  },",
									"                  \"userTimeZone\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userVisaStatus\": {",
									"                      \"type\": \"string\"",
									"                  }",
									"                }",
									"          },",
									"          \"role\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"roleId\",",
									"                  \"roleName\",",
									"                  \"roleDesc\",",
									"                  \"creationTime\",",
									"                  \"lastModTime\",",
									"                  \"hibernateLazyInitializer\"",
									"              ],",
									"              \"properties\": {",
									"                  \"roleId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleDesc\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"creationTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"lastModTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"hibernateLazyInitializer\": {",
									"                      \"type\": \"object\"",
									"                  }",
									"              }",
									"           },",
									"          \"batches\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"          },",
									"          \"userRoleStatus\": {",
									"              \"type\": \"string\"",
									"          }",
									"      }",
									"  }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson[0].user.userId).to.eql(pm.environment.get(\"studentUserId\"));",
									"    pm.expect(responseJson[0].user.userFirstName).to.eql(pm.variables.get(\"studentUserFirstName\"));",
									"    pm.expect(responseJson[0].user.userLastName).to.eql(pm.variables.get(\"userLastName\"));",
									"    pm.expect(responseJson[0].user.userMiddleName).to.eql(pm.variables.get(\"userMiddleName\"));",
									"    pm.expect(responseJson[0].user.userPhoneNumber).to.eql(parseInt(pm.environment.get(\"userPhoneNumber\")));",
									"    pm.expect(responseJson[0].user.userLocation).to.eql(pm.variables.get(\"userLocation\"));",
									"    pm.expect(responseJson[0].user.userTimeZone).to.eql(pm.variables.get(\"userTimeZone\"));",
									"    pm.expect(responseJson[0].user.userLinkedinUrl).to.eql(pm.variables.get(\"userLinkedinUrl\"));",
									"    pm.expect(responseJson[0].user.userEduUg).to.eql(pm.variables.get(\"userEduUg\"));",
									"    pm.expect(responseJson[0].user.userEduPg).to.eql(pm.variables.get(\"userEduPg\"));",
									"    pm.expect(responseJson[0].user.userComments).to.eql(pm.variables.get(\"userComments\"));",
									"    pm.expect(responseJson[0].user.userVisaStatus).to.eql(pm.variables.get(\"userVisaStatus\"));",
									"    pm.expect(responseJson[0].role.roleId).to.eql(pm.variables.get(\"roleId\"));",
									"    pm.expect(responseJson[0].userRoleStatus).to.eql(pm.variables.get(\"userRoleStatus\"));",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "dd4c3c57-e157-4044-9cd8-b57cba937e55"
							}
						}
					],
					"id": "87fa3f48-1f2f-426c-99df-bc01251f0cd9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userId"
							],
							"variable": [
								{
									"id": "e17cb994-6f88-4056-83d7-deef2d7ee597",
									"key": "userId",
									"value": "{{studentUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users with Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"items\": {",
									"      \"type\": \"object\",",
									"      \"required\": [",
									"          \"userRoleId\",",
									"          \"user\",",
									"          \"role\",",
									"          \"batches\",",
									"          \"userRoleStatus\"",
									"      ],",
									"      \"properties\": {",
									"          \"userRoleId\": {",
									"              \"type\": \"integer\"",
									"          },",
									"          \"user\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"userId\",",
									"                  \"userFirstName\",",
									"                  \"userLastName\",",
									"                  \"userPhoneNumber\",",
									"                  \"userTimeZone\",",
									"                  \"userVisaStatus\",",
									"                  \"hibernateLazyInitializer\"",
									"              ],",
									"              \"properties\": {",
									"                  \"userId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userFirstName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userLastName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userPhoneNumber\": {",
									"                      \"type\": \"integer\"",
									"                  },",
									"                  \"userTimeZone\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userVisaStatus\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"hibernateLazyInitializer\": {",
									"                      \"type\": \"object\"",
									"                  }",
									"                }",
									"          },",
									"          \"role\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"roleId\",",
									"                  \"roleName\",",
									"                  \"roleDesc\",",
									"                  \"creationTime\",",
									"                  \"lastModTime\",",
									"                  \"hibernateLazyInitializer\"",
									"              ],",
									"              \"properties\": {",
									"                  \"roleId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleDesc\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"creationTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"lastModTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"hibernateLazyInitializer\": {",
									"                      \"type\": \"object\"",
									"                  }",
									"              }",
									"           },",
									"          \"batches\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"          },",
									"          \"userRoleStatus\": {",
									"              \"type\": \"string\"",
									"          }",
									"      }",
									"  }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Filter admin user created earlier",
									"const adminUser = responseJson.filter((user) => user.user.userId === pm.environment.get(\"adminUserId\"));",
									"",
									"// Test4 - Validate Admin user",
									"pm.test(\"Admin user created should be in All users\", () => {",
									"    pm.expect(adminUser.length).to.eql(1);",
									"    pm.expect(adminUser[0]).to.be.an('object');",
									"});",
									"",
									"// Filter staff user created earlier",
									"const staffUser = responseJson.filter((user) => user.user.userId === pm.environment.get(\"staffUserId\"));",
									"",
									"// Test5 - Validate Staff user",
									"pm.test(\"Staff user created should be in All users\", () => {",
									"    pm.expect(staffUser.length).to.eql(1);",
									"    pm.expect(staffUser[0]).to.be.an('object');",
									"});",
									"",
									"// Filter student user created earlier",
									"const studentUser = responseJson.filter((user) => user.user.userId === pm.environment.get(\"studentUserId\"));",
									"",
									"// Test6 - Validate Student user",
									"pm.test(\"Student user created should be in All users\", () => {",
									"    pm.expect(studentUser.length).to.eql(1);",
									"    pm.expect(studentUser[0]).to.be.an('object');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "4eaa1b9f-5ce6-4500-baab-5dbc0034f7f4"
							}
						}
					],
					"id": "431c0630-9d52-4527-8737-2daa949977c4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/users/users/roles"
					},
					"response": []
				},
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": {",
									"        \"type\": \"object\",",
									"        \"required\": [",
									"            \"userId\",",
									"            \"userFirstName\",",
									"            \"userLastName\",",
									"            \"userPhoneNumber\",",
									"            \"userTimeZone\",",
									"            \"userVisaStatus\"",
									"        ],",
									"        \"properties\": {",
									"            \"userId\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"userFirstName\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"userLastName\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"userPhoneNumber\": {",
									"                \"type\": \"integer\"",
									"            },",
									"            \"userTimeZone\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"userVisaStatus\": {",
									"                \"type\": \"string\"",
									"            }",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Filter admin user created earlier",
									"const adminUser = responseJson.filter((user) => user.userId === pm.environment.get(\"adminUserId\"));",
									"",
									"// Test4 - Validate Admin user",
									"pm.test(\"Admin user created should be in All users\", () => {",
									"    pm.expect(adminUser.length).to.eql(1);",
									"    pm.expect(adminUser[0]).to.be.an('object');",
									"});",
									"",
									"// Filter staff user created earlier",
									"const staffUser = responseJson.filter((user) => user.userId === pm.environment.get(\"staffUserId\"));",
									"",
									"// Test5 - Validate Staff user",
									"pm.test(\"Staff user created should be in All users\", () => {",
									"    pm.expect(staffUser.length).to.eql(1);",
									"    pm.expect(staffUser[0]).to.be.an('object');",
									"});",
									"",
									"// Filter student user created earlier",
									"const studentUser = responseJson.filter((user) => user.userId === pm.environment.get(\"studentUserId\"));",
									"",
									"// Test6 - Validate Student user",
									"pm.test(\"Student user created should be in All users\", () => {",
									"    pm.expect(studentUser.length).to.eql(1);",
									"    pm.expect(studentUser[0]).to.be.an('object');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "b1277ce9-8419-4f27-8870-da98cab4515c"
							}
						}
					],
					"id": "f5e9436d-f1df-44d9-9fe2-705b6589a862",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/users/users"
					},
					"response": []
				},
				{
					"name": "Update Admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"     \"required\": [",
									"      \"userId\",",
									"      \"userFirstName\",",
									"      \"userLastName\",",
									"      \"userMiddleName\",",
									"      \"userPhoneNumber\",",
									"      \"userLocation\",",
									"      \"userTimeZone\",",
									"      \"userLinkedinUrl\",",
									"      \"userEduUg\",",
									"      \"userEduPg\",",
									"      \"userComments\",",
									"      \"userVisaStatus\"",
									"    ],",
									"    \"properties\": {",
									"        \"userId\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userFirstName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLastName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userMiddleName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userPhoneNumber\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"userLocation\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userTimeZone\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLinkedinUrl\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduUg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduPg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userComments\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userVisaStatus\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.userFirstName).to.eql(pm.variables.get(\"putUserFirstName\"));",
									"    pm.expect(responseJson.userLastName).to.eql(pm.variables.get(\"putUserLastName\"));",
									"    pm.expect(responseJson.userPhoneNumber).to.eql(parseInt(pm.variables.get(\"putUserPhoneNumber\")));",
									"    pm.expect(responseJson.userLocation).to.eql(pm.variables.get(\"putUserLocation\"));",
									"    pm.expect(responseJson.userTimeZone).to.eql(pm.variables.get(\"putUserTimeZone\"));",
									"    pm.expect(responseJson.userLinkedinUrl).to.eql(pm.variables.get(\"putUserLinkedinUrl\"));",
									"    pm.expect(responseJson.userEduUg).to.eql(pm.variables.get(\"putUserEduUg\"));",
									"    pm.expect(responseJson.userEduPg).to.eql(pm.variables.get(\"putUserEduPg\"));",
									"    pm.expect(responseJson.userComments).to.eql(pm.variables.get(\"putUserComments\"));",
									"    pm.expect(responseJson.userVisaStatus).to.eql(pm.variables.get(\"putUserVisaStatus\"));",
									"});",
									"",
									"// Set global variables from response, to be used by other requests",
									"if(responseJson)",
									"{",
									"    pm.environment.set(\"adminUserId\", responseJson.userId);",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "98221cda-49a7-42e3-983c-ee08cc80c0b7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.variables.set(\"putUserPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"putUserFirstName\") + randomNum;",
									"pm.variables.set(\"putUserFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "1120ec38-90ce-4f5b-b0a7-7e47debad8bb"
							}
						}
					],
					"id": "8276aeaf-a670-4f01-a983-0773dc023bcd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{putUserComments}}\",\n    \"userEduPg\": \"{{putUserEduPg}}\",\n    \"userEduUg\": \"{{putUserEduUg}}\",\n    \"userFirstName\": \"{{putUserFirstName}}\",\n    \"userLastName\": \"{{putUserLastName}}\",\n    \"userLinkedinUrl\": \"{{putUserLinkedinUrl}}\",\n    \"userLocation\": \"{{putUserLocation}}\",\n    \"userPhoneNumber\": {{putUserPhoneNumber}},\n    \"userTimeZone\": \"{{putUserTimeZone}}\",\n    \"userVisaStatus\": \"{{putUserVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userId"
							],
							"variable": [
								{
									"id": "4ec22945-3aaf-48d7-8e76-81caa51f170c",
									"key": "userId",
									"value": "{{adminUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user first name as null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messagePutMandatoryFirstName\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "dc9482de-e720-43d0-a6d2-e92372637af7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.variables.set(\"putUserPhoneNumber\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "9115c5be-6d64-48b6-ae06-d53d3422c2d2"
							}
						}
					],
					"id": "29219651-361a-411f-a13f-b4cfae16015e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userFirstName\": null,\n    \"userLastName\": \"{{putUserLastName}}\",\n    \"userPhoneNumber\": {{putUserPhoneNumber}},\n    \"userTimeZone\": \"{{putUserTimeZone}}\",\n    \"userVisaStatus\": \"{{putUserVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userId"
							],
							"variable": [
								{
									"id": "56635173-02e1-436e-9d6f-2dcd0f1f13f5",
									"key": "userId",
									"value": "{{adminUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user last name as null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messagePutMandatoryLastName\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "96804d06-6224-4386-8621-768afe20312a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.variables.set(\"putUserPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"putUserFirstName\") + randomNum;",
									"pm.variables.set(\"putUserFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "e955c97d-f549-4c5e-82ff-168cd5aa0cf8"
							}
						}
					],
					"id": "a67ac7b5-5056-4a41-8909-4f99e07aae8f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userFirstName\": \"{{putUserFirstName}}\",\n    \"userLastName\": null,\n    \"userPhoneNumber\": {{putUserPhoneNumber}},\n    \"userTimeZone\": \"{{putUserTimeZone}}\",\n    \"userVisaStatus\": \"{{putUserVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userId"
							],
							"variable": [
								{
									"id": "34497671-eb68-4c11-81f8-cf19bd9f97d3",
									"key": "userId",
									"value": "{{adminUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user time zone as null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messagePutMandatoryTimeZone\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "16ab1e07-4cf0-49bf-9ae2-19321c23eff2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.variables.set(\"putUserPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"putUserFirstName\") + randomNum;",
									"pm.variables.set(\"putUserFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "9d9d9fb7-7d0a-43a8-bf54-4b2173349973"
							}
						}
					],
					"id": "f643f844-818e-4fd2-a0fe-354f1425188d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userFirstName\": \"{{putUserFirstName}}\",\n    \"userLastName\": \"{{putUserLastName}}\",\n    \"userPhoneNumber\": {{putUserPhoneNumber}},\n    \"userTimeZone\": null,\n    \"userVisaStatus\": \"{{putUserVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userId"
							],
							"variable": [
								{
									"id": "6c26d8b7-764b-49e9-a8ed-e0648809ad7d",
									"key": "userId",
									"value": "{{adminUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user visa status as null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messagePutMandatoryVisaStatus\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "07626646-770e-4782-95e9-eb5be315b191"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.variables.set(\"putUserPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"putUserFirstName\") + randomNum;",
									"pm.variables.set(\"putUserFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "d93ed3ff-de1e-41f6-af16-ab7abf4764e5"
							}
						}
					],
					"id": "8037a136-a05f-424b-ac7b-b5bf9d1dac6c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userFirstName\": \"{{putUserFirstName}}\",\n    \"userLastName\": \"{{putUserLastName}}\",\n    \"userPhoneNumber\": {{putUserPhoneNumber}},\n    \"userTimeZone\": \"{{putUserTimeZone}}\",\n    \"userVisaStatus\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userId"
							],
							"variable": [
								{
									"id": "8021970e-21b2-45da-898a-7d5b2e8777cd",
									"key": "userId",
									"value": "{{adminUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user phone number as undefined",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"id": "e5ebba7b-6569-4b65-852a-7167be7257b2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"putUserPhoneNumber\", undefined);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"putUserFirstName\") + randomNum;",
									"pm.variables.set(\"putUserFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "6b0530f0-0ab2-4b53-beb1-bae038c552e1"
							}
						}
					],
					"id": "3ff0c5d3-afb5-4e22-8387-6bf5560d53b2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userFirstName\": \"{{putUserFirstName}}\",\n    \"userLastName\": \"{{putUserLastName}}\",\n    \"userPhoneNumber\": {{putUserPhoneNumber}},\n    \"userTimeZone\": \"{{putUserTimeZone}}\",\n    \"userVisaStatus\": \"{{putUserVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userId"
							],
							"variable": [
								{
									"id": "3e5446a2-b400-4e95-94f7-57c666500bbd",
									"key": "userId",
									"value": "{{adminUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Admin user by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2- Validate the response body",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(\"Deleted User ID:  \" + pm.environment.get(\"adminUserId\"));",
									"});",
									"",
									"// unset env variable",
									"pm.environment.unset(\"adminUserId\");"
								],
								"type": "text/javascript",
								"id": "a808a0d7-74b8-4915-ac91-1707e179e4e7"
							}
						}
					],
					"id": "14ee4b57-33d6-445f-b3d2-52b7e000c54a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userID"
							],
							"variable": [
								{
									"id": "1454326a-6917-4a5a-980e-b6aca4c70698",
									"key": "userID",
									"value": "{{adminUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"userProgramId\", pm.response.json().programId);"
								],
								"type": "text/javascript",
								"id": "3fa2d0c5-da71-4dd7-873b-99607c283506"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomNum = Math.floor(Math.random() * 1000);",
									"const firstName = pm.variables.get(\"userProgramName\") + randomNum;",
									"pm.variables.set(\"userProgramName\", firstName);"
								],
								"type": "text/javascript",
								"id": "e9cb72c8-381a-4d55-adff-f6e7eb83c9e4"
							}
						}
					],
					"id": "44a9c583-6558-423a-a689-d3445b5aa03d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{userProgramDescription}}\",\n  \"programName\": \"{{userProgramName}}\",\n  \"programStatus\": \"{{userProgramStatus}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create program batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"userBatchId\", pm.response.json().batchId);"
								],
								"type": "text/javascript",
								"id": "ca7dbf03-f2da-47b3-90bf-4b56b850cd26"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomNum = Math.floor(Math.random() * 1000);",
									"const firstName = pm.variables.get(\"userBatchName\") + randomNum;",
									"pm.variables.set(\"userBatchName\", firstName);"
								],
								"type": "text/javascript",
								"id": "68a1585b-8d4b-48ba-9a21-9fbc6e6f8bda"
							}
						}
					],
					"id": "c58fe5ea-fbd9-4af1-bb63-ae78ed6e1783",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"batchDescription\": \"{{userBatchDescription}}\",\n  \"batchName\": \"{{userBatchName}}\",\n  \"batchNoOfClasses\": {{userBatchNoOfClasses}},\n  \"batchStatus\": \"{{userBatchStatus}}\",\n  \"programId\": {{userProgramId}}\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Update batch Status with missing ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Program Id is mandatory\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "685bae09-9a6e-4165-9a7f-2761e05df14f"
							}
						}
					],
					"id": "278d939d-600d-4ec6-bcc1-a9508084aa60",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"roleId\": \"{{roleId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\": {{userBatchId}},\n      \"userRoleProgramBatchStatus\": \"{{userBatchStatus}}\"\n    }\n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleProgramBatchStatus/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleProgramBatchStatus",
								":userId"
							],
							"variable": [
								{
									"id": "215422e3-8478-4090-a5d7-8a3ed4cdfdc9",
									"key": "userId",
									"value": "{{staffUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update batch Status with missing Roleid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Role Id is mandatory\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "5f06f3bf-abd2-4665-912f-f6b55db3f9be"
							}
						}
					],
					"id": "5501d351-520e-44e0-be01-461294fe48c4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"programId\": {{userProgramId}},\n    \"userRoleProgramBatches\": [\n    {\n      \"batchId\": {{userBatchId}},\n      \"userRoleProgramBatchStatus\": \"{{userBatchStatus}}\"\n    }\n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleProgramBatchStatus/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleProgramBatchStatus",
								":userId"
							],
							"variable": [
								{
									"id": "948d5f1e-ddfa-42f1-9830-e9dd353c22d8",
									"key": "userId",
									"value": "{{staffUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update batch Status with missing Batch id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Batch Id is mandatory\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "5f36039e-5bda-4b22-9dd8-db208389307a"
							}
						}
					],
					"id": "41ecad2c-61ef-4c70-af22-bce8a578c37a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"programId\": {{userProgramId}},\n    \"roleId\": \"{{roleId}}\",\n    \"userRoleProgramBatches\": [\n    {\n      \"userRoleProgramBatchStatus\": \"{{userBatchStatus}}\"\n    }\n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleProgramBatchStatus/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleProgramBatchStatus",
								":userId"
							],
							"variable": [
								{
									"id": "343f460f-dede-4159-93ef-ef9499e59dac",
									"key": "userId",
									"value": "{{staffUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update batch Status with missing Batch status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"User-Role-Program-Batch Status is Mandatory\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "0828669d-1942-4d87-afa2-706ba5be89fa"
							}
						}
					],
					"id": "441d4caa-b3ce-4bf5-a265-90dbec35ecc7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"programId\": {{userProgramId}},\n    \"roleId\": \"{{roleId}}\",\n    \"userRoleProgramBatches\": [\n    {\n        \"batchId\": {{userBatchId}}\n    }\n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleProgramBatchStatus/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleProgramBatchStatus",
								":userId"
							],
							"variable": [
								{
									"id": "202ec8b5-6349-402e-bdea-93f9adb2dee8",
									"key": "userId",
									"value": "{{staffUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update batch status with invalid programid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.expect(pm.response.status).to.eql('Not Found');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Program \" + pm.variables.get(\"invalidProgramid\") + \" not found with Program Status : \" + pm.variables.get(\"userBatchStatus\") + \" \");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "5d14e374-dc08-48d3-a3a9-685c87605596"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomNum = Math.floor(Math.random() * 10000000);",
									"pm.variables.set(\"invalidProgramid\", randomNum);"
								],
								"type": "text/javascript",
								"id": "292a0356-b597-4f5a-afea-d60c778223a2"
							}
						}
					],
					"id": "cb74bd9f-c3ac-471f-adfd-db47c4cc6895",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\": {{invalidProgramid}},\n  \"roleId\": \"{{roleId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\": {{userBatchId}},\n      \"userRoleProgramBatchStatus\": \"{{userBatchStatus}}\"\n    }\n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleProgramBatchStatus/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleProgramBatchStatus",
								":userId"
							],
							"variable": [
								{
									"id": "8df58772-0fc4-4c84-b7d6-11e24ed334d4",
									"key": "userId",
									"value": "{{staffUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update batch status with invalid batchid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Batch \" + pm.variables.get(\"batchId\") + \"not found with Status as Active for Program \" + pm.variables.get(\"programId\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "64e494ba-505a-4075-bfa6-ed859655ff7f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomNum = Math.floor(Math.random() * 10000000);",
									"pm.variables.set(\"invalidBatchid\", randomNum);"
								],
								"type": "text/javascript",
								"id": "6b991008-c3c3-4412-b439-85b936d16e21"
							}
						}
					],
					"id": "1dbabffe-f34d-40a1-ab34-df6cabcbb971",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\": {{userProgramId}},\n  \"roleId\": \"{{roleId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\": {{invalidBatchid}},\n      \"userRoleProgramBatchStatus\": \"{{userBatchStatus}}\"\n    }\n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleProgramBatchStatus/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleProgramBatchStatus",
								":userId"
							],
							"variable": [
								{
									"id": "be7076dd-dd15-4815-b2b0-8cd7bdd3c30a",
									"key": "userId",
									"value": "{{staffUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user role program batch status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2- Validate the response body",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(\"User \" + pm.environment.get(\"staffUserId\") + \" has been successfully assigned to Program/Batch(es)\");",
									"});"
								],
								"type": "text/javascript",
								"id": "2d5ab45b-5592-4149-84c5-3bf487eb2e05"
							}
						}
					],
					"id": "f4029fc6-e44b-4429-8afd-517ef41cd127",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\": {{userProgramId}},\n  \"roleId\": \"{{roleId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\": {{userBatchId}},\n      \"userRoleProgramBatchStatus\": \"{{userBatchStatus}}\"\n    }\n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleProgramBatchStatus/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleProgramBatchStatus",
								":userId"
							],
							"variable": [
								{
									"id": "6e4a4edb-2c2d-4cdc-a005-bed620ff4a42",
									"key": "userId",
									"value": "{{staffUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Program Batch by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"pm.environment.unset(\"userBatchId\");"
								],
								"type": "text/javascript",
								"id": "b45d71f7-475f-4580-a8c5-b01bba683a5c"
							}
						}
					],
					"id": "500a7d03-26d6-4401-9ccc-53171b26371d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/batches/:batchId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								":batchId"
							],
							"variable": [
								{
									"id": "920bbe69-4b74-4a5f-830a-cb1291336bac",
									"key": "batchId",
									"value": "{{userBatchId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete program by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"pm.environment.unset(\"userProgramId\");"
								],
								"type": "text/javascript",
								"id": "ffec6527-ea9c-4b90-a287-5134a7a98920"
							}
						}
					],
					"id": "07a88c69-44b5-4201-8eae-2adf7ffaf7a4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/deletebyprogid/:programId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"deletebyprogid",
								":programId"
							],
							"variable": [
								{
									"id": "ccdcc0cb-8587-4bc9-b48e-eedf594f9945",
									"key": "programId",
									"value": "{{userProgramId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Staff user by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2- Validate the response body",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(\"Deleted User ID:  \" + pm.environment.get(\"staffUserId\"));",
									"});",
									"",
									"// unset env variable",
									"pm.environment.unset(\"staffUserId\");"
								],
								"type": "text/javascript",
								"id": "d973367a-2f81-474d-9143-87b9a6bdafd8"
							}
						}
					],
					"id": "2c367fac-b956-4230-babb-4d66a73bd389",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userID"
							],
							"variable": [
								{
									"id": "83d573e2-748e-41ff-a537-391b9835aeff",
									"key": "userID",
									"value": "{{staffUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Student user by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2- Validate the response body",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(\"Deleted User ID:  \" + pm.environment.get(\"studentUserId\"));",
									"});",
									"",
									"pm.environment.unset(\"studentUserId\");"
								],
								"type": "text/javascript",
								"id": "3862894c-e966-4e24-b5aa-b45f53c25575"
							}
						}
					],
					"id": "327b4042-e721-4603-bd51-14816b94cffd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userID"
							],
							"variable": [
								{
									"id": "b717e359-5038-4fca-b20f-5bacb3cb8687",
									"key": "userID",
									"value": "{{studentUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new user only mandatory fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.expect(pm.response.status).to.eql('Created');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"      \"userId\",",
									"      \"userFirstName\",",
									"      \"userLastName\",",
									"      \"userPhoneNumber\",",
									"      \"userTimeZone\",",
									"      \"userLinkedinUrl\",",
									"      \"userEduUg\",",
									"      \"userEduPg\",",
									"      \"userVisaStatus\"",
									"    ],",
									"    \"properties\": {",
									"        \"userId\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userFirstName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLastName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userPhoneNumber\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"userTimeZone\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userVisaStatus\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test4 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test5 - Validate userId starts with U",
									"pm.test(\"Auto-created userId should have U\", () => {",
									"    pm.expect(responseJson.userId).to.contain('U');",
									"});",
									"",
									"// Test6 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.userFirstName).to.eql(pm.variables.get(\"userFirstName\"));",
									"    pm.expect(responseJson.userLastName).to.eql(pm.variables.get(\"userLastName\"));",
									"    pm.expect(responseJson.userMiddleName).to.be.undefined;",
									"    pm.expect(responseJson.userPhoneNumber).to.eql(parseInt(pm.variables.get(\"userPhoneNumber\")));",
									"    pm.expect(responseJson.userLocation).to.be.null;",
									"    pm.expect(responseJson.userTimeZone).to.eql(pm.variables.get(\"userTimeZone\"));",
									"    pm.expect(responseJson.userLinkedinUrl).to.be.null;",
									"    pm.expect(responseJson.userEduUg).to.be.null;",
									"    pm.expect(responseJson.userEduPg).to.be.null;",
									"    pm.expect(responseJson.userComments).to.be.undefined;",
									"    pm.expect(responseJson.userVisaStatus).to.eql(pm.variables.get(\"userVisaStatus\"));",
									"});",
									"",
									"// Set global variables from response, to be used by other requests",
									"if(responseJson)",
									"{",
									"    pm.environment.set(\"userId\", responseJson.userId);",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "85e0d7f5-3918-4f47-9b89-0de58dc7a6a9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "47d8bf73-57f3-406d-a4e6-f0d2fdf98be6"
							}
						}
					],
					"id": "c6cc2415-e1e8-45c9-9e2a-b8773f3c6735",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with duplicate phone number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Failed to create new User as phone number \" + pm.environment.get(\"userPhoneNumber\") + \" already exists !!\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"pm.environment.unset(\"userPhoneNumber\");"
								],
								"type": "text/javascript",
								"id": "3b79190c-e91a-41a0-ac88-46d8efd97313"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "d35f1582-7781-44e1-b81f-64867cb42c15"
							}
						}
					],
					"id": "670cd996-5a30-47b4-b878-f2cedae07521",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userMiddleName\": \"\",\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Update User role status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2- Validate the response body",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(pm.variables.get(\"messageUpdateStatusSuccess\") +  pm.environment.get(\"userId\"));",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "a752080b-975d-4cfb-b621-ef910c58b39c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c99a78f2-2b55-4d99-a161-9b374ec8b551"
							}
						}
					],
					"id": "767e3a2c-61a5-4507-bd69-4f57db40335d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roleId\": \"{{roleId}}\",\n    \"userRoleStatus\": \"{{userRoleStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleStatus/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleStatus",
								":userID"
							],
							"variable": [
								{
									"id": "c9add456-51d9-40f5-aab4-4f866e1d5c1d",
									"key": "userID",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User role roleStatus as integer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2- Validate the response body",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(pm.variables.get(\"messageUpdateStatusSuccess\") +  pm.environment.get(\"userId\"));",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "f5718b48-75ce-45fb-8dee-59e4afef1be3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "9697cce7-c2ea-4146-b05f-848c039db7c9"
							}
						}
					],
					"id": "5404c9ce-2d80-413c-868e-044633b8da97",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roleId\": \"{{roleId}}\",\n    \"userRoleStatus\": {{integerRoleStatus}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleStatus/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleStatus",
								":userID"
							],
							"variable": [
								{
									"id": "d6fc0b42-b0c3-407b-87fc-03f1f281a49c",
									"key": "userID",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User role roleId as integer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.expect(pm.response.status).to.eql('Not Found');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"message1UpdateStatusRoleid\") + pm.variables.get(\"integerUserRoleId\") + pm.variables.get(\"message2UpdateStatusRoleid\") + pm.variables.get(\"userId\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "587d34ce-3dc5-4adf-9963-ed03210c1d3e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d5cc60de-1885-4aae-8e5a-a33ea1ee86bc"
							}
						}
					],
					"id": "ee95e672-92b6-498e-a5e8-1f8a3c060b73",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roleId\": {{integerUserRoleId}},\n    \"userRoleStatus\": \"{{userRoleStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleStatus/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleStatus",
								":userID"
							],
							"variable": [
								{
									"id": "37e1b135-7156-4554-9a80-bf1327e9b1f4",
									"key": "userID",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User role status with blank roleStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryRoleStatus\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "205d3c0a-b037-4ea4-b9c9-e24e2125415d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4593c1e9-da23-4841-9c22-e657b1933ba1"
							}
						}
					],
					"id": "4dcffba1-2e7f-4a93-a9a8-26f6008edaf4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roleId\": \"{{roleId}}\",\n    \"userRoleStatus\": \"{{blankUserRoleStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleStatus/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleStatus",
								":userID"
							],
							"variable": [
								{
									"id": "f16c4f6f-036d-4962-ae92-a85dbe85c8b7",
									"key": "userID",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User role status with blank roleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryRoleid\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "ef27d2f3-7cda-4e3f-aa34-7f47ddcf70e7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c7510523-aabd-499b-be89-04ea6d84be19"
							}
						}
					],
					"id": "1caa688f-a7ba-4b2a-a4a0-233dba73a282",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roleId\": \"{{blankRoleId}}\",\n    \"userRoleStatus\": \"{{userRoleStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleStatus/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleStatus",
								":userID"
							],
							"variable": [
								{
									"id": "cf6e3762-289b-4cb3-994f-d6e670d56085",
									"key": "userID",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User role missing roleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryRoleid\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "3d12f72c-5f98-4934-8570-d972680eca32"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "dd92f164-9b5a-4fe2-b9aa-324da9483eb6"
							}
						}
					],
					"id": "b25f2f2b-a95a-4c29-bb20-113b5ad4b0ef",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userRoleStatus\": \"{{userRoleStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleStatus/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleStatus",
								":userID"
							],
							"variable": [
								{
									"id": "930b6550-72b0-4542-ab46-43618709f0bb",
									"key": "userID",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User role missing role status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryRoleStatus\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "07bcace7-729d-4b73-9837-0628b0c5d771"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "75182a61-911b-4944-8dab-79c5623beae8"
							}
						}
					],
					"id": "46b67d14-4ddb-4443-bd5a-9d53c76a90da",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roleId\": \"{{roleId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleStatus/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleStatus",
								":userID"
							],
							"variable": [
								{
									"id": "9e929c78-c477-43f5-ad1b-f8d605623499",
									"key": "userID",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Use Update userRole API to update roleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.expect(pm.response.status).to.eql('Not Found');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageUpdateRoleStatusInvalidroleid\") + pm.variables.get(\"userId\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "00b9d985-589b-4f57-bd27-0dc27344155e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f04f5713-7246-4e6b-9284-d486ef924fe0"
							}
						}
					],
					"id": "58e9b10c-5e24-4a13-95d8-e597b64639eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roleId\": \"{{invalidUserRoleId}}\",\n    \"userRoleStatus\": \"{{userRoleStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleStatus/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleStatus",
								":userID"
							],
							"variable": [
								{
									"id": "62a602f9-b05b-401f-b39f-b06fd75e2a23",
									"key": "userID",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users with Roles to verify role updates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"items\": {",
									"      \"type\": \"object\",",
									"      \"required\": [",
									"          \"userRoleId\",",
									"          \"user\",",
									"          \"role\",",
									"          \"batches\",",
									"          \"userRoleStatus\"",
									"      ],",
									"      \"properties\": {",
									"          \"userRoleId\": {",
									"              \"type\": \"integer\"",
									"          },",
									"          \"user\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"userId\",",
									"                  \"userFirstName\",",
									"                  \"userLastName\",",
									"                  \"userPhoneNumber\",",
									"                  \"userTimeZone\",",
									"                  \"userVisaStatus\",",
									"                  \"hibernateLazyInitializer\"",
									"              ],",
									"              \"properties\": {",
									"                  \"userId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userFirstName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userLastName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userPhoneNumber\": {",
									"                      \"type\": \"integer\"",
									"                  },",
									"                  \"userTimeZone\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userVisaStatus\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"hibernateLazyInitializer\": {",
									"                      \"type\": \"object\"",
									"                  }",
									"                }",
									"          },",
									"          \"role\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"roleId\",",
									"                  \"roleName\",",
									"                  \"roleDesc\",",
									"                  \"creationTime\",",
									"                  \"lastModTime\",",
									"                  \"hibernateLazyInitializer\"",
									"              ],",
									"              \"properties\": {",
									"                  \"roleId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleDesc\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"creationTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"lastModTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"hibernateLazyInitializer\": {",
									"                      \"type\": \"object\"",
									"                  }",
									"              }",
									"           },",
									"          \"batches\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"          },",
									"          \"userRoleStatus\": {",
									"              \"type\": \"string\"",
									"          }",
									"      }",
									"  }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Filter user updated earlier",
									"var filteredUser = responseJson.filter((user) => user.user.userId === pm.environment.get(\"userId\"));",
									"",
									"// Test4 - Validate the user",
									"pm.test(\"user created should be in All users\", () => {",
									"    pm.expect(filteredUser.length).to.eql(1);",
									"    pm.expect(filteredUser[0]).to.be.an('object');",
									"});",
									"",
									"// Test5 - Validate the updated details",
									"pm.test(\"Details updated\", () => {",
									"    pm.expect(filteredUser[0].role.roleId).to.eql(pm.variables.get(\"roleId\"));",
									"    pm.expect(parseInt(filteredUser[0].userRoleStatus)).to.eql(parseInt(pm.variables.get(\"integerRoleStatus\")));",
									"});"
								],
								"type": "text/javascript",
								"id": "07f38b5d-0567-45b0-a1d6-ff0fe634faaf"
							}
						}
					],
					"id": "a0769c7d-56c7-4983-86dc-77e3622d6ed6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/users/users/roles"
					},
					"response": []
				},
				{
					"name": "Delete User by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2- Validate the response body",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(\"Deleted User ID:  \" + pm.environment.get(\"userId\"));",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "f6b8d86a-d236-4561-b6a0-1b66468e80ae"
							}
						}
					],
					"id": "9a1eb220-79f6-423a-988b-3be13c089780",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userID"
							],
							"variable": [
								{
									"id": "89c49174-f18c-45b1-943e-287e5c560ef0",
									"key": "userID",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get deleted user by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.expect(pm.response.status).to.eql('Not Found');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"User Id \" + pm.environment.get(\"userId\") + \" not found\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"pm.environment.unset(\"userId\");"
								],
								"type": "text/javascript",
								"id": "7a67cffd-8fe3-4274-8898-0d0375099d3e"
							}
						}
					],
					"id": "ed6fae79-8041-4b40-8dc4-7b3ac1d4f1ba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userId"
							],
							"variable": [
								{
									"id": "1dfbe36b-d40d-4f45-b705-785ca00d43dc",
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by id using id without U",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.expect(pm.response.status).to.eql('Not Found');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"User Id \" + pm.variables.get(\"userId\") + \" not found\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"pm.variables.unset(\"userId\");"
								],
								"type": "text/javascript",
								"id": "f5c1bc11-2364-43e7-bfa2-12fe35b630ea"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomNum = Math.floor(Math.random() * 10000000);",
									"pm.variables.set(\"userId\", randomNum);"
								],
								"type": "text/javascript",
								"id": "420b65af-01ec-4059-9f57-2e084827c75f"
							}
						}
					],
					"id": "0711fac2-4d89-4137-89af-365c2567cd09",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userId"
							],
							"variable": [
								{
									"id": "4d8996c1-a85e-4394-b5d9-5e918802c117",
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new user with string values as integers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.expect(pm.response.status).to.eql('Created');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"     \"required\": [",
									"      \"userId\",",
									"      \"userFirstName\",",
									"      \"userLastName\",",
									"      \"userMiddleName\",",
									"      \"userPhoneNumber\",",
									"      \"userLocation\",",
									"      \"userTimeZone\",",
									"      \"userLinkedinUrl\",",
									"      \"userEduUg\",",
									"      \"userEduPg\",",
									"      \"userComments\",",
									"      \"userVisaStatus\"",
									"    ],",
									"    \"properties\": {",
									"        \"userId\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userFirstName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLastName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userMiddleName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userPhoneNumber\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"userLocation\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userTimeZone\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLinkedinUrl\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduUg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduPg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userComments\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userVisaStatus\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test4 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test5 - Validate userId starts with U",
									"pm.test(\"Auto-created userId should have U\", () => {",
									"    pm.expect(responseJson.userId).to.contain('U');",
									"});",
									"",
									"// Test6 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.userFirstName).to.be.string;",
									"    pm.expect(responseJson.userLastName).to.be.string;",
									"    pm.expect(responseJson.userMiddleName).to.be.string;",
									"    pm.expect(responseJson.userEduUg).to.be.string;",
									"    pm.expect(responseJson.userEduPg).to.be.string;",
									"    pm.expect(responseJson.userComments).to.be.string;",
									"    pm.expect(responseJson.userLinkedinUrl).to.be.string;",
									"    pm.expect(responseJson.userLocation).to.be.string;",
									"    pm.expect(responseJson.userVisaStatus).to.be.string;",
									"    pm.expect(parseInt(responseJson.userFirstName)).to.eql(pm.variables.get(\"userFirstName\"));",
									"    pm.expect(parseInt(responseJson.userLastName)).to.eql(pm.variables.get(\"userLastName\"));",
									"    pm.expect(parseInt(responseJson.userMiddleName)).to.eql(pm.variables.get(\"userMiddleName\"));",
									"    pm.expect(responseJson.userPhoneNumber).to.eql(parseInt(pm.environment.get(\"userPhoneNumber\")));",
									"    pm.expect(parseInt(responseJson.userLocation)).to.eql(pm.variables.get(\"userLocation\"));",
									"    pm.expect(responseJson.userTimeZone).to.eql(pm.variables.get(\"userTimeZone\"));",
									"    pm.expect(parseInt(responseJson.userLinkedinUrl)).to.eql(pm.variables.get(\"userLinkedinUrl\"));",
									"    pm.expect(parseInt(responseJson.userEduUg)).to.eql(pm.variables.get(\"userEduUg\"));",
									"    pm.expect(parseInt(responseJson.userEduPg)).to.eql(pm.variables.get(\"userEduPg\"));",
									"    pm.expect(parseInt(responseJson.userComments)).to.eql(pm.variables.get(\"userComments\"));",
									"    pm.expect(responseJson.userVisaStatus).to.eql(pm.variables.get(\"userVisaStatus\"));",
									"});",
									"",
									"// Set global variables from response, to be used by other requests",
									"pm.environment.set(\"userId\", responseJson.userId);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "d3ce3620-9039-4283-8f18-921e59b58281"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"pm.variables.set(\"userFirstName\", phoneNumber);",
									"pm.variables.set(\"userLastName\", phoneNumber);",
									"pm.variables.set(\"userMiddleName\", phoneNumber);",
									"pm.variables.set(\"userComments\", phoneNumber);",
									"pm.variables.set(\"userEduPg\", phoneNumber);",
									"pm.variables.set(\"userEduUg\", phoneNumber);",
									"pm.variables.set(\"userLinkedinUrl\", phoneNumber);",
									"pm.variables.set(\"userLocation\", phoneNumber);",
									"pm.variables.set(\"userRoleStatus\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "27936eb8-c2c7-41fe-aad3-0d8e4defd16e"
							}
						}
					],
					"id": "7064179e-4c40-4c79-86b4-70cfcb9b37ea",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": {{userComments}},\n    \"userEduPg\": {{userEduPg}},\n    \"userEduUg\": {{userEduUg}},\n    \"userFirstName\": {{userFirstName}},\n    \"userLastName\": {{userLastName}},\n    \"userLinkedinUrl\": {{userLinkedinUrl}},\n    \"userLocation\": {{userLocation}},\n    \"userMiddleName\": {{userMiddleName}},\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": {{userRoleStatus}}\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Delete User by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2- Validate the response body",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(\"Deleted User ID:  \" + pm.environment.get(\"userId\"));",
									"});",
									"",
									"pm.environment.unset(\"userId\");"
								],
								"type": "text/javascript",
								"id": "9ea9a856-fd1c-414c-8ad5-e716a7b5aad3"
							}
						}
					],
					"id": "009b583c-6ad4-4abe-a432-91f44cfce056",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userID"
							],
							"variable": [
								{
									"id": "28691db8-c77e-483a-b81f-a40a876ed2f4",
									"key": "userID",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new user with missing phone number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMissingPhone\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "e00b3a1f-e0c5-4fac-8fbc-68567ddcf8ed"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "508ee728-2ec5-4e9a-aebc-8f326110c82a"
							}
						}
					],
					"id": "f62b5237-167c-49f6-9c40-31d5fbeb3e8e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with blank phone number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMissingPhone\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "357d4057-68f3-4c7e-8b86-01648dce7cb5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userPhoneNumber\", undefined);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "3f4b78e7-3e9e-43da-a2cf-29a6bc413cbd"
							}
						}
					],
					"id": "98a999fa-e669-4c94-9522-9ce49b5c61b6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userMiddleName\": \"\",\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with string phone number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageStringPhone\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "08288bc4-7b12-4839-b777-6f637d301a91"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "ed22886a-f5dc-4033-aa61-f0386af9b11e"
							}
						}
					],
					"id": "36f0289c-c094-4830-9ced-41b12e0bc729",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"stringUserPhoneNumber\": \"{{stringUserPhoneNumber}}\",\n    \"userMiddleName\": \"\",\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with missing role id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryRoleid\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "45cba3e3-acd1-468e-a161-fb564f1098de"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "1c10a1f9-b55a-440f-a231-1d92fe156583"
							}
						}
					],
					"id": "89ca6509-83ec-4701-bb2a-a060536b2739",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with blank role id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryRoleid\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "8ab6793c-9458-4af9-ac46-ab7ee7b0022d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);",
									""
								],
								"type": "text/javascript",
								"id": "da8b3337-30be-4a84-97fa-c0dec47ad884"
							}
						}
					],
					"id": "01df18a2-3c03-4d93-a8fe-18ffbf817440",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{blankRoleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with invalid role id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageInvalidRoleid\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "dfe8fd83-5e71-4399-97fa-f0d0ecb4c4db"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "72f15888-3394-41dc-a6cd-1e50b4ed1607"
							}
						}
					],
					"id": "8bb5eba7-d6ec-4b78-87c3-a7dbafd1a40b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{invalidRoleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with integer role id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"memessageInvalidRoleidsage\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "3307aac6-7ebc-4e8f-a568-d87a1f29aaff"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "cdb05e83-61a8-4738-86b1-0d2de4370508"
							}
						}
					],
					"id": "d082cbc3-e4d9-487e-87e3-5f1564b08c98",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": {{integerUserRoleId}},\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with missing role status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryRoleStatus\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "9a9bd828-f841-487a-8044-d9204c8b236a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "5d3a1693-56ad-4b37-89df-e3583ccdce40"
							}
						}
					],
					"id": "1f5f5ae4-e62a-47bf-886a-10cf7be3a553",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with blank role status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryRoleStatus\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "b7734864-8f64-4883-9c04-a3f68ffc5514"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "6cf029e6-a4fe-4600-870e-2f2c40faf83a"
							}
						}
					],
					"id": "e8415bbe-594f-4516-8676-5097407cb42b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{blankUserRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with missing first name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryFirstName\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "469580aa-f077-411a-82dc-bc8e69b2cfeb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "d32fb812-93ca-4704-8388-18e402643f5e"
							}
						}
					],
					"id": "9a778bbc-874a-4586-8c54-7848f22e5807",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with blank first name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryFirstName\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "5d261535-d5c0-4728-bbd7-e2732943ea6f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "6d57c885-d4ea-499b-95ca-c46821a35a95"
							}
						}
					],
					"id": "acfb57f1-271f-40ff-ac19-511c17f4dfd4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userFirstName\": \"{{blankUserFirstName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with missing last name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryLastName\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "01564104-323f-4a10-826c-9c920f048ce1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "4dbe2e01-ef04-4fda-a523-fe7751e2f660"
							}
						}
					],
					"id": "f9cb39e5-25cb-465b-ab0f-e3c6bd29e595",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with blank last name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryLastName\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "aa43d3b7-a8a0-40b0-aa76-b8ae5bb6de0a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "434a2629-2bab-4686-9083-089a58a3796d"
							}
						}
					],
					"id": "b977affe-fc9f-4db1-aad4-49cdff5c9bf9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{blankUserLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with missing time zone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryTimeZone\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "e3311197-5cfb-465b-8aec-fdf503af2c38"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "3b73a4f6-d934-439b-a066-2863145d8c4f"
							}
						}
					],
					"id": "8b560e48-61de-48b0-b550-8c6d9bb02bb5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with blank time zone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryTimeZone\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "10d619fd-234e-4c16-976d-716367a21e09"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "2f40437a-c123-4fb6-83ea-4eef856c5645"
							}
						}
					],
					"id": "f96b438b-be40-4ee4-8ae7-880195a63c24",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{blankUserTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with invalid time zone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryTimeZone\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "ac897617-496d-4b5c-a1d3-6117eefef161"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "40d931db-e2ac-45c5-ae1f-eafe2edf6bd8"
							}
						}
					],
					"id": "8b23154d-cce9-49e6-99cf-24c995ff54bf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{invalidUserTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with missing visa status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryVisaStatus\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "7e51a8f0-2fbf-469b-845f-f65ee7fe4951"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);",
									""
								],
								"type": "text/javascript",
								"id": "45b6e61a-0340-4d44-9029-006e72d02ae4"
							}
						}
					],
					"id": "dca8d0ae-42b2-4d83-94b8-d6f929aa237b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with blank visa status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryVisaStatus\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "782f0b8d-d679-4222-bc2f-553ab80da039"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "3740c721-2cfd-44b6-8276-c5069f3cf9dd"
							}
						}
					],
					"id": "9f8006b5-15f2-472e-b162-e8302d1ca83d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{blankUserVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with invalid visa status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryVisaStatus\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "1ffd114e-96f6-474f-941a-87fc4ffe7c06"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "9dd60ba1-7ff3-4153-9b9a-1d8d4c4f82f6"
							}
						}
					],
					"id": "9621e8f4-10e3-4fcc-80f6-28f8c44b7a1d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{invalidUserVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with integer visa status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryVisaStatus\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "82d76f98-9bd7-43d3-904a-7255430741b9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"pm.variables.set(\"userVisaStatus\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "a416b393-755f-4c71-89d2-d83539d4fc81"
							}
						}
					],
					"id": "b2eaab4f-4790-4b48-9020-c0e5d528eecf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": {{userVisaStatus}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with integer time zone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryTimeZone\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"pm.environment.unset(\"userPhoneNumber\");"
								],
								"type": "text/javascript",
								"id": "597e7ae5-98a6-4e8f-ab0f-ea21a6616bf6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"pm.variables.set(\"userTimeZone\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "8222e003-6b4a-4c1f-a0d0-a465a352bf4d"
							}
						}
					],
					"id": "43d603be-43a0-41ae-a326-f094a1bd4bcd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": {{userTimeZone}},\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				}
			],
			"id": "b05b5c62-3370-4704-a7e6-ee0452b448a6"
		},
		{
			"name": "Assignment",
			"item": [
				{
					"name": "Precondition: Create new program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 : Program successfully created \", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//Setting environment variable",
									"var responseObject = pm.response.json();",
									"pm.environment.set(\"programId\",responseObject.programId);",
									"console.log(responseObject.programId);",
									""
								],
								"type": "text/javascript",
								"id": "03cf60e4-08aa-4a6c-a9d3-0d465c58e613"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var CrprogramNameAssign = \"Jun23-APICollectors-SDET\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"programNameAssign\",CrprogramNameAssign);"
								],
								"type": "text/javascript",
								"id": "d89c2750-6f63-4072-8388-a14e66e947d5"
							}
						}
					],
					"id": "d00c682c-99ff-4069-ba59-820a174784b2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDescriptionAssign}}\",\n  \"programName\": \"{{programNameAssign}}\",\n  \"programStatus\": \"{{programStatusAssign}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Precondition: Create new batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 : Batch successfully created \", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//Setting environment variable",
									"//pm.environment.set( \"batchId\", response.batchId);",
									"",
									"var responseObject = pm.response.json();",
									"pm.environment.set( \"batchId\", responseObject.batchId);",
									"console.log(responseObject.batchId);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "ee86fbc9-d95f-4f75-b0d8-f030944cda31"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var CrbatchNameAssign = pm.variables.get(\"programNameAssign\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"batchNameAssign\",CrbatchNameAssign);"
								],
								"type": "text/javascript",
								"id": "f9787d3f-1e62-4626-9ee0-f7aff3e11bbf"
							}
						}
					],
					"id": "d766a8ac-27ea-4464-b02a-a6123d90d987",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"batchDescription\": \"{{batchDescriptionAssign}}\",\n  \"batchName\": \"{{batchNameAssign}}\",\n  \"batchNoOfClasses\": {{batchNoOfClassesAssign}},\n  \"batchStatus\": \"{{batchStatusAssign}}\",\n  \"programId\": {{programId}}\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Precondition: Create new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ebf483b8-e9a9-4fb8-aab9-120b6ba0a185",
								"exec": [
									"pm.test(\"Status code is 201 : User successfully created \", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//Setting environment variable",
									"//Setting environment variable",
									"var responseObject = pm.response.json();",
									"pm.environment.set( \"userId\", responseObject.userId);",
									"console.log(responseObject.userId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "870bc54a-5b9a-47c5-a5fa-23f0c2bc3afa",
								"exec": [
									"\r",
									"var firstName = \"Numpy \"+ pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"userFirstName\",firstName);\r",
									"\r",
									"//Phone number\r",
									"const phoneNumberUser = Math.floor((Math.random()*1000000000 +1));\r",
									"pm.globals.set(\"phoneNumberuserAssign\", phoneNumberUser);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0fe47486-0053-4d9c-986d-6f6ad1b77698",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"userComments\": \"{{userComments}}\",\n\"userEduPg\": \"{{userEduPg}}\",\n\"userEduUg\": \"{{userEduUg}}\",\n\"userFirstName\": \"{{userFirstName}}\",\n\"userLastName\": \"{{userLastName}}\",\n\"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n\"userLocation\": \"{{userLocation}}\",\n\"userMiddleName\": \"{{userMiddleName}}\",\n\"userPhoneNumber\":{{phoneNumberuserAssign}},\n\"userRoleMaps\": [\n{\n\"roleId\": \"{{roleId}}\",\n\"userRoleStatus\": \"{{userRoleStatus}}\"\n}\n],\n\"userTimeZone\": \"{{userTimeZone}}\",\n\"userVisaStatus\": \"{{userVisaStatus}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Precondition: Create inactive user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c3e91fb-e962-4886-9c0f-50b59776938a",
								"exec": [
									"pm.test(\"Status code is 201 : User successfully created \", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//Setting environment variable",
									"var responseObject = pm.response.json();",
									"pm.environment.set( \"InactiveuserId\", responseObject.userId);",
									"console.log(responseObject.InactiveuserId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "34ec603e-2134-4cb8-8f96-e01526eb1103",
								"exec": [
									"//Phone number\r",
									"const phoneNumberUser = Math.floor((Math.random()*1000000000 +1));\r",
									"pm.globals.set(\"phoneNumberuserAssign\", phoneNumberUser);\r",
									"\r",
									"var firstName = \"Numpy \"+ pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"userFirstName\",firstName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b5a2447b-6d71-49cd-8d43-647ccbd114de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"userComments\": \"{{userComments}}\",\n\"userEduPg\": \"{{userEduPg}}\",\n\"userEduUg\": \"{{userEduUg}}\",\n\"userFirstName\": \"{{userFirstName}}\",\n\"userLastName\": \"{{userLastName}}\",\n\"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n\"userLocation\": \"{{userLocation}}\",\n\"userMiddleName\": \"{{userMiddleName}}\",\n\"userPhoneNumber\": {{phoneNumberuserAssign}},\n\"userRoleMaps\": [\n{\n\"roleId\": \"{{roleId}}\",\n\"userRoleStatus\": \"{{userRoleStatusInactive}}\"\n}\n],\n\"userTimeZone\": \"{{userTimeZone}}\",\n\"userVisaStatus\": \"{{userVisaStatus}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create New Assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Setting environment variable",
									"var responseObject = pm.response.json();",
									"pm.environment.set( \"assignmentId\", responseObject.assignmentId);",
									"console.log(responseObject.assignmentId);",
									"",
									"",
									"//validate Status",
									"pm.test(\"Status code is 201 : Assignment created successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//Validate content header",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Validate Schema",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"",
									"",
									"",
									"   //\"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"   // \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    //\"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"assignmentId\",",
									"        \"assignmentName\",",
									"        \"assignmentDescription\",",
									"        \"comments\",",
									"        \"dueDate\",",
									"        \"pathAttachment1\",",
									"        \"pathAttachment2\",",
									"        \"pathAttachment3\",",
									"        \"pathAttachment4\",",
									"        \"pathAttachment5\",",
									"        \"batchId\",",
									"        \"createdBy\",",
									"        \"graderId\"",
									"    ], ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "ed09fe6e-c6c4-4b6b-9f47-0bb2b4cacb6d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var CrassignmentName = pm.variables.get(\"programNameAssign\")+\"-SQL-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"assignmentName\",CrassignmentName);"
								],
								"type": "text/javascript",
								"id": "f18d10ca-1c04-4ddb-b354-a14a1ef4dcdc"
							}
						}
					],
					"id": "6402c3d1-b8a8-43eb-a19a-ca727575cfc2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"assignmentDescription\": \"{{assignmentDescription}}\",\n  \n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments"
					},
					"response": []
				},
				{
					"name": "Create without mandatory field : created by",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400: Missing created by\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Created By is mandatory\");",
									"",
									"});"
								],
								"type": "text/javascript",
								"id": "8093f019-d00e-4036-9ca5-8acb671997f1"
							}
						}
					],
					"id": "6a6e6819-fe1e-4264-8533-dfd90b1d6e6f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"assignmentDescription\": \"{{assignmentDescription}}\",\n  \n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments"
					},
					"response": []
				},
				{
					"name": "Create without mandatory field : Assignment Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400: Missing Assignment Name\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Assignment Name is mandatory\");",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "5777ceae-d1ff-4e46-bbf5-4b632cdab5dc"
							}
						}
					],
					"id": "e1511f5b-0380-4618-ad73-3e83e0833610",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"assignmentDescription\": \"{{assignmentDescription}}\",\n  \n  \"assignmentName\": \"\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments"
					},
					"response": []
				},
				{
					"name": "Create without mandatory field : Batch ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400: Missing batch ID\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch ID is mandatory\");",
									"",
									"});"
								],
								"type": "text/javascript",
								"id": "37f75c3b-f93d-4514-b2e9-87673fac00aa"
							}
						}
					],
					"id": "09263a24-718c-459c-9701-a68df4c44bd0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"assignmentDescription\": \"{{assignmentDescription}}\",\n  \n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments"
					},
					"response": []
				},
				{
					"name": "Create without mandatory field : Due date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400: Missing Due Date\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Due Date is mandatory\");",
									"",
									"});"
								],
								"type": "text/javascript",
								"id": "f938f644-4a79-4c49-9cb9-c321242d2387"
							}
						}
					],
					"id": "de99a2be-2091-4ccd-8fca-152a996733bc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"assignmentDescription\": \"{{assignmentDescription}}\",\n  \n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments"
					},
					"response": []
				},
				{
					"name": "Create without mandatory field : Assignment description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400: Missing Assignment Description\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Assignment Description is mandatory\");",
									"",
									"});"
								],
								"type": "text/javascript",
								"id": "bcf64ee0-37fa-4344-bdef-546d5dd88de4"
							}
						}
					],
					"id": "86a28c94-0d83-447f-b9f1-55b10516adf5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"assignmentDescription\": \"\",\n  \n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments"
					},
					"response": []
				},
				{
					"name": "Create without mandatory field : GraderID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400: Missing Assignment Description\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Grader ID is mandatory\");",
									"",
									"});"
								],
								"type": "text/javascript",
								"id": "ee75f5f1-a672-4bfc-8146-6149d8793a44"
							}
						}
					],
					"id": "4f144c8e-cb52-439f-aee4-62d37f70beeb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"assignmentDescription\": \"{{assignmentDescription}}\",\n  \n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments"
					},
					"response": []
				},
				{
					"name": "Create with invalid due date format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400: Invalid date format\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Invalid date format\");",
									"",
									"});"
								],
								"type": "text/javascript",
								"id": "5533d75d-5562-4fe8-8c2a-bb99db0e56e0"
							}
						}
					],
					"id": "77efad90-64b8-434a-9208-a564ae5a8899",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"assignmentDescription\": \"{{assignmentDescription}}\",\n  \n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{invalidDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments"
					},
					"response": []
				},
				{
					"name": "Create with inactive user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400: Created by is inactive user\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"/*",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Assignment Description is mandatory\");",
									"",
									"}); */"
								],
								"type": "text/javascript",
								"id": "a94d49f5-6b1c-418e-a721-8e1d09e595d1"
							}
						}
					],
					"id": "bd0250f0-ea7d-4a4b-8248-320a3007ee10",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"assignmentDescription\": \"{{assignmentDescription}}\",\n  \n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{InactiveuserId}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments"
					},
					"response": []
				},
				{
					"name": "Get All Assignments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									"const schema = {",
									"\"type\": \"array\",",
									"",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"assignmentId\",",
									"        \"assignmentName\",",
									"        \"assignmentDescription\",",
									"        \"comments\",",
									"        \"dueDate\",",
									"        \"pathAttachment1\",",
									"        \"pathAttachment2\",",
									"        \"pathAttachment3\",",
									"        \"pathAttachment4\",",
									"        \"pathAttachment5\",",
									"        \"batchId\",",
									"        \"createdBy\",",
									"        \"graderId\"",
									"    ], ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "b508810b-5b0c-405d-99e5-d27bd175a5c0"
							}
						}
					],
					"id": "73804529-baba-4271-b640-7d88a2e13fac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignments/"
					},
					"response": []
				},
				{
					"name": "Get Assignment by batch ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									"const schema = {",
									"\"type\": \"array\",",
									"",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"assignmentId\",",
									"        \"assignmentName\",",
									"        \"assignmentDescription\",",
									"        \"comments\",",
									"        \"dueDate\",",
									"        \"pathAttachment1\",",
									"        \"pathAttachment2\",",
									"        \"pathAttachment3\",",
									"        \"pathAttachment4\",",
									"        \"pathAttachment5\",",
									"        \"batchId\",",
									"        \"createdBy\",",
									"        \"graderId\"",
									"    ], ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "a7f354ab-e6cb-4914-a1b6-52e2ab4eacbf"
							}
						}
					],
					"id": "31221ccb-0d66-4158-b184-3831a0b40233",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignments/batch/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Get Assignment By Assignment ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"assignmentId\",",
									"        \"assignmentName\",",
									"        \"assignmentDescription\",",
									"        \"comments\",",
									"        \"dueDate\",",
									"        \"pathAttachment1\",",
									"        \"pathAttachment2\",",
									"        \"pathAttachment3\",",
									"        \"pathAttachment4\",",
									"        \"pathAttachment5\",",
									"        \"batchId\",",
									"        \"createdBy\",",
									"        \"graderId\"",
									"    ], ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "f6fc5c2a-95d1-4374-a500-5999e2a936eb"
							}
						}
					],
					"id": "8bf58a57-c7fe-490b-a6ca-e5af389f87ab",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignments/{{assignmentId}}"
					},
					"response": []
				},
				{
					"name": "Get assignment by non existant ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404: Assignement does not exist\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Assignment not found with Id : \" +pm.collectionVariables.get(\"nonexistantassignmentId\") + \" \" );",
									"",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"    \"title\": \"Root Schema\",",
									"    ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "b4a74581-9972-4f43-a83b-eb49323e4b8f"
							}
						}
					],
					"id": "a444edeb-4bb3-4699-97a9-7929e9d388a1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignments/{{nonexistantassignmentId}}"
					},
					"response": []
				},
				{
					"name": "Get assignment by invalid non integer assignment ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400: Invalid Assignment ID\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().error).to.eql(\"Bad Request\");",
									"",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"    \"title\": \"Root Schema\",",
									"    ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "0e2af3c6-024f-4122-8fa2-fff3b7b5e4e7"
							}
						}
					],
					"id": "daa06e60-ed98-4994-89a1-180b4a421150",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignments/{{invalidId}}"
					},
					"response": []
				},
				{
					"name": "Get assignment by non existant batch ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404: Batch does not exist\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {",
									"    console.log(response.json());",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch not found with Id : \" +pm.collectionVariables.get(\"batchNA\") + \" \" );",
									"",
									"});",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"    \"title\": \"Root Schema\",",
									"   ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "d83d7a61-f88b-4642-8ddf-1656960604c1"
							}
						}
					],
					"id": "4ef9b8e3-05bc-4d6d-be94-66d0ae79e54b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignments/batch/{{batchNA}}"
					},
					"response": []
				},
				{
					"name": "Get assignment by invalid batch ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400: Invalid batch ID\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {",
									"    console.log(response.json());",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().error).to.eql(\"Bad Request\");",
									"",
									"});",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"    \"title\": \"Root Schema\",",
									"   ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "bad483e2-2895-4675-bd7b-3c13bd5f270f"
							}
						}
					],
					"id": "1b5c3287-341a-474d-b98a-f03b98256e71",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignments/batch/{{batchInvalid}}"
					},
					"response": []
				},
				{
					"name": "Get assignment If batch id present and no assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch not found with Id : \" +pm.collectionVariables.get(\"batchwithnoassignment\") + \" \" );",
									"",
									"});",
									"pm.test(\"Status code is 404 : Batch with no assignment\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"id": "47205121-68ff-4508-b7d7-62997370c25a"
							}
						}
					],
					"id": "66770f0a-d626-42c6-ab64-e6042585ae21",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignments/batch/{{batchwithnoassignment}}"
					},
					"response": []
				},
				{
					"name": "Update existing assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var responseObject = pm.response.json();",
									"pm.environment.set( \"NewassignmentId\", responseObject.assignmentId);",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"",
									"",
									"",
									"   //\"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"   // \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    //\"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"assignmentId\",",
									"        \"assignmentName\",",
									"        \"assignmentDescription\",",
									"        \"comments\",",
									"        \"dueDate\",",
									"        \"pathAttachment1\",",
									"        \"pathAttachment2\",",
									"        \"pathAttachment3\",",
									"        \"pathAttachment4\",",
									"        \"pathAttachment5\",",
									"        \"batchId\",",
									"        \"createdBy\",",
									"        \"graderId\"",
									"    ], ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "2f37704e-eeef-421c-8231-f604d1b422eb"
							}
						}
					],
					"id": "1b3724cb-c71e-453e-a2d3-0d840efa522e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"assignmentDescription\": \"{{assignmentDescription}}\",\n  \"assignmentId\": \"{{assignmentId}}\",\n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{updatecomments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments/{{assignmentId}}"
					},
					"response": []
				},
				{
					"name": "Update non existing assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"",
									"",
									"",
									"   //\"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"   // \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    //\"default\": {},",
									"    \"title\": \"Root Schema\",",
									"   ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"id": "59fa05a7-e789-4e44-8dde-0dc8930030d7"
							}
						}
					],
					"id": "badf9549-505b-4204-bef1-66015a13ae9e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"assignmentDescription\": \"{{assignmentDescription}}\",\n  \"assignmentId\": \"{{nonexistantassignmentId}}\",\n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments/{{nonexistantassignmentId}}"
					},
					"response": []
				},
				{
					"name": "Update without mandatory field : Assignment Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"",
									"});",
									"",
									"pm.test(\"Body matches string : Assignment Name is mandatory\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Assignment Name is mandatory\");",
									"",
									"});",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"",
									"",
									"",
									"   //\"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"   // \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    //\"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "6f087d0a-02fb-4512-889b-04483424a581"
							}
						}
					],
					"id": "d2f8ae75-bec8-42e0-a610-39bf12a10bf4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"assignmentDescription\": \"{{assignmentDescription}}\",\n  \"assignmentId\": \"{{updateId}}\",\n  \"assignmentName\": \"\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments/{{updateId}}"
					},
					"response": []
				},
				{
					"name": "Update without mandatory field : Created By",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"",
									"});",
									"",
									"",
									"pm.test(\"Body matches string : Created By is mandatory\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Created By is mandatory\");",
									"",
									"});",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"",
									"",
									"",
									"   //\"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"   // \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    //\"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript",
								"id": "ebaae021-6b38-4c90-adad-9097edd83f89"
							}
						}
					],
					"id": "bac9085f-37d9-4e44-84d9-85062f9676ca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"assignmentDescription\": \"Updated postman Intro part-1\",\n  \"assignmentId\": \"621\",\n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments/{{updateId}}"
					},
					"response": []
				},
				{
					"name": "Update without mandatory field : Grader ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"",
									"});",
									"",
									"",
									"pm.test(\"Body matches string : Grader ID is mandatory\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Grader ID is mandatory\");",
									"",
									"});",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"",
									"",
									"",
									"   //\"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"   // \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    //\"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript",
								"id": "f3d5a631-2a2e-46de-acfd-b1cc5f1675bf"
							}
						}
					],
					"id": "b5fab0cb-0b00-489b-9a4a-8ecc28e325e2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"assignmentDescription\": \"Updated postman Intro part-1\",\n  \"assignmentId\": \"621\",\n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments/{{updateId}}"
					},
					"response": []
				},
				{
					"name": "Update without mandatory field : Batch ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"",
									"});",
									"",
									"",
									"pm.test(\"Body matches string : Batch ID is mandatory\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch ID is mandatory\");",
									"",
									"});",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"",
									"",
									"",
									"   //\"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"   // \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    //\"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript",
								"id": "1af868f1-b239-42ea-bad8-96ac0f0e8dcc"
							}
						}
					],
					"id": "609ca58a-b999-4153-92dc-893844345b78",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"assignmentDescription\": \"Updated postman Intro part-1\",\n  \"assignmentId\": \"621\",\n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments/{{updateId}}"
					},
					"response": []
				},
				{
					"name": "Update without mandatory field : Due Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"",
									"});",
									"",
									"",
									"pm.test(\"Body matches string : Due Date is mandatory\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Due Date is mandatory\");",
									"",
									"});",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"",
									"",
									"",
									"   //\"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"   // \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    //\"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript",
								"id": "674cfab6-4c6c-4377-af13-145a323b0d7e"
							}
						}
					],
					"id": "90e9f82c-0921-4795-931e-be22fb3cf295",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"assignmentDescription\": \"Updated postman Intro part-1\",\n  \"assignmentId\": \"{{updateId}}\",\n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments/{{updateId}}"
					},
					"response": []
				},
				{
					"name": "Update without mandatory field : Assignment Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"",
									"});",
									"",
									"",
									"pm.test(\"Body matches string : Assignment Description is mandatory\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Assignment Description is mandatory\");",
									"",
									"});",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"",
									"",
									"",
									"   //\"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"   // \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    //\"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript",
								"id": "3d2840cb-f0ec-4ebb-930b-7264b5804636"
							}
						}
					],
					"id": "f298575b-2680-4da7-b64e-989dd7ae60f0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"assignmentDescription\": \"\",\n  \"assignmentId\": \"{{updateId}}\",\n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments/{{updateId}}"
					},
					"response": []
				},
				{
					"name": "Update with invalid GraderID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"",
									"});",
									"",
									"",
									"pm.test(\"Body matches string : User not found with ID\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"User not found with ID : \"+pm.collectionVariables.get(\"invalidGrader\")+\" \");",
									"",
									"});",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"",
									"",
									"",
									"   //\"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"   // \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    //\"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript",
								"id": "47076fa2-6f5d-46b9-9359-696c53eb33a4"
							}
						}
					],
					"id": "f0f8d287-eb7e-4fb5-bdd0-2cebd814fb99",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"assignmentDescription\": \"{{assignmentDescription}}\",\n  \"assignmentId\": \"{{updateId}}\",\n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{invalidGrader}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments/{{assignmentId}}"
					},
					"response": []
				},
				{
					"name": "Update with invalid date format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"",
									"});",
									"",
									"",
									"pm.test(\"Body matches string : Bad Request\", function () {",
									"    pm.expect(pm.response.json().error).to.eql(\"Bad Request\");",
									"",
									"});",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"",
									"",
									"",
									"   //\"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"   // \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    //\"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript",
								"id": "c7e198a9-fab8-42af-a8fe-605dfaa1c5b1"
							}
						}
					],
					"id": "0fa4c1bd-4ff7-46dd-b4e6-640fb9c0468d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"assignmentDescription\": \"{{assignmentDescription}}\",\n  \"assignmentId\": \"{{updateId}}\",\n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{invalidDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments/{{updateId}}"
					},
					"response": []
				},
				{
					"name": "Delete Assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"",
									"pm.test(\"Status code is 200 : Assignment deleted successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Assignment deleted successfully\");",
									"",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "c84e3ff0-4434-4c08-b330-b3727e3e1813"
							}
						}
					],
					"id": "a137f9fb-9412-42c0-a135-9b0b998d709a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/assignments/{{assignmentId}}"
					},
					"response": []
				},
				{
					"name": "Delete same Assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 : Deleted assignment can not be deleted again \", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "f79b95dd-c571-4fcb-a2fa-f097f394f313"
							}
						}
					],
					"id": "3e61a125-c5a7-4701-a83d-c46c7f9d16fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/assignments/{{assignmentId}}"
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"pm.test(\"Status code is 200 : User deleted successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"/*",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().error).to.eql(\"Assignment deleted successfully\");",
									"",
									"}); */",
									"",
									"//UnSet environment variable",
									"pm.environment.unset(\"userId\");",
									"pm.globals.unset(\"phoneNumber\");"
								],
								"type": "text/javascript",
								"id": "46976a71-726f-4015-9bfd-b52e96eac63d"
							}
						}
					],
					"id": "8564ceea-0f8f-4199-85ce-ee17d1731d45",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/users/users/{{userId}}"
					},
					"response": []
				},
				{
					"name": "Delete Inactive user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"",
									"pm.test(\"Status code is 200 : User deleted successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"/*",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().error).to.eql(\"Assignment deleted successfully\");",
									"",
									"}); */",
									"",
									"//UnSet environment variable",
									"pm.environment.unset(\"InactiveuserId\");"
								],
								"type": "text/javascript",
								"id": "dcb0a6f3-5b62-47cc-9862-2cf158a1129a"
							}
						}
					],
					"id": "6488b9ab-dd95-4d69-b5e9-69c748871e48",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/users/users/{{InactiveuserId}}"
					},
					"response": []
				},
				{
					"name": "Delete batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200 : Batch deleted successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//UnSet environment variable",
									"pm.environment.unset( \"batchId\");"
								],
								"type": "text/javascript",
								"id": "2d117292-debe-4687-b461-1bcdf697f9a2"
							}
						}
					],
					"id": "6501d968-3f3f-492a-9545-0d277f088d6b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Delete program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200 : Program deleted successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//UnSet environment variable",
									"pm.environment.unset(\"programId\");",
									"pm.environment.unset(\"programnumber\");",
									"",
									"//UnSet environment variable",
									"pm.environment.unset( \"NewassignmentId\");",
									"//UnSet environment variable",
									"pm.environment.unset( \"assignmentId\");",
									"pm.environment.unset( \"assignmentname\");"
								],
								"type": "text/javascript",
								"id": "ad540007-b388-4f38-8963-f41b6391904c"
							}
						}
					],
					"id": "ac72ee1c-88b0-4939-a6e7-b682f9e42b24",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogid/{{programId}}"
					},
					"response": []
				}
			],
			"id": "fd246cdf-b1d0-4700-ac1d-6998c8fa0f47",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "3d67dda7-90bc-4f02-be6c-b531d1f510e2"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "bb8d8654-5d8d-4c08-a0dc-067e56e97b9d"
					}
				}
			]
		},
		{
			"name": "Assignment Submit",
			"item": [
				{
					"name": "Create Program",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3ff0204d-ac32-4469-a159-1c7d089bdd0e",
								"exec": [
									"",
									"// const num=pm.collectionVariables.set(\"serial\") ",
									"// pm.environment.set(\"counter\",num );",
									"// let counter = pm.environment.get(\"counter\");",
									"// counter ++ // increment by 1",
									"// pm.collectionVariables.set(\"serial\", counter);",
									"",
									"",
									"var SrprogramName = \"Jun23-APICollectors-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');",
									"pm.environment.set(\"programName\",SrprogramName);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3e104ae1-8464-4cf4-a103-f23e72a0a262",
								"exec": [
									"",
									"",
									"const response=pm.response.json();",
									"console.log(response);",
									"pm.environment.set(\"programId\",response.programId);",
									"pm.collectionVariables.set(\"resPgmName\",response.programName);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"//Validating values on Response Body",
									"pm.test(\"Validate Response Body values\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"programId\");",
									"    pm.expect(pm.response.text()).to.include(\"programName\");",
									"    pm.expect(pm.response.text()).to.include(\"programDescription\");",
									"    pm.expect(pm.response.text()).to.include(\"programStatus\");",
									"});",
									"",
									"pm.test(\"Status code should have message Created\", function () {",
									"    pm.response.to.have.status(\"Created\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "eee7d5c2-de54-448f-bb0a-089e35734cc9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDesc}}\",\n    \"programName\": \"{{programName}}{{serial}}\",\n  \"programStatus\": \"{{pgmStatus1}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create Batch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b59a805c-8b0c-4f9e-acf7-c4536162106b",
								"exec": [
									"// const num=pm.collectionVariables.set(\"serial\") ",
									"// pm.environment.set(\"counter\",num );",
									"// let counter = pm.environment.get(\"counter\");",
									"// counter ++ // increment by 1",
									"// pm.collectionVariables.set(\"serial\", counter);",
									"",
									"//var SrbatchName = pm.collectionVariables.get(\"batchName\")+ pm.variables.replaceIn('{{$randomInt}}');",
									"pm.collectionVariables.set(\"programId\",)",
									"var batchNameSr = pm.collectionVariables.get(\"batchNameAssignment\")+ pm.variables.replaceIn('{{$randomInt}}');",
									"pm.environment.set(\"batchName\",batchNameSr);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "be007675-bb9c-4572-997b-34322c0b4323",
								"exec": [
									"",
									"const response=pm.response.json();",
									"console.log(response);",
									"pm.environment.set(\"batchId\", response.batchId);",
									"pm.environment.set(\"batchName\", response.batchName);",
									"",
									"",
									"console.log(response.batchId);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"//Validating values on Response Body",
									"pm.test(\"Validate Response Body values\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"batchId\");",
									"    pm.expect(pm.response.text()).to.include(\"batchName\");",
									"    pm.expect(pm.response.text()).to.include(\"batchDescription\");",
									"    pm.expect(pm.response.text()).to.include(\"batchStatus\");",
									"});",
									"",
									"pm.test(\"Status code should have message Created\", function () {",
									"    pm.response.to.have.status(\"Created\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0da3aa86-72cb-4a2d-b4d8-b42451b6901f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"batchDescription\": \"{{batchDesc}}\",\n  \"batchName\": \"{{batchName}}\",\n  \"batchNoOfClasses\": 10,\n  \"batchStatus\": \"{{Status1}}\",\n  \"programId\": {{programId}}\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Create Admin User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9d80b02b-feba-46c0-ad2d-1b0cd9904b8d",
								"exec": [
									"// const num=pm.collectionVariables.set(\"serial\") ",
									"// pm.environment.set(\"counter\",num );",
									"// let counter = pm.environment.get(\"counter\");",
									"// counter ++ // increment by 1",
									"// pm.collectionVariables.set(\"serial\", counter);",
									"",
									"//Phone number",
									"const phoneNumber = Math.floor((Math.random()*1000000000 +1));",
									"pm.environment.set(\"randomNumber\", phoneNumber);",
									"",
									"var firstNameUser = pm.collectionVariables.get(\"firstName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');",
									"pm.environment.set(\"firstName\",firstNameUser);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f0bfe735-3fc7-421f-b5b1-91c8619d50ec",
								"exec": [
									"",
									"const response=pm.response.json();",
									"console.log(response);",
									"pm.collectionVariables.set(\"userId\", response.userId);",
									"",
									"",
									"console.log(response.userId);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Created\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "116ebdfa-1c47-4f41-9106-8507c0df68be",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComment}}\",\n    \"userEduPg\": \"{{PG}}\",\n    \"userEduUg\": \"{{UG}}\",\n    \"userFirstName\": \"{{firstName}}\",\n    \"userLastName\": \"{{$randomLastName}}\",\n    \"userLinkedinUrl\": \"{{linkedinUrl}}\",\n    \"userLocation\": \"{{$randomCity}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{phoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{Admin}}\",\n            \"userRoleStatus\": \"{{Status1}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{timeZone1}}\",\n    \"userVisaStatus\": \"{{visaStatus1}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create user Student",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2c910195-da20-4b84-b4ca-ae0045db1e13",
								"exec": [
									"// pm.environment.set(\"counter\",215);",
									"// let counter = pm.environment.get(\"counter\");",
									"// counter ++ // increment by 1",
									"// pm.collectionVariables.set(\"serial\", counter);",
									"",
									"//Phone number",
									"const phoneNumber = Math.floor((Math.random()*1000000000 +1));",
									"pm.environment.set(\"randomNumber\", phoneNumber);",
									"",
									"var firstNameStudent = pm.variables.get(\"programNamebatch\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');",
									"pm.environment.set(\"firstName\",firstNameStudent);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8ec3994b-db75-43cf-bfe1-3efeb406e15b",
								"exec": [
									"",
									"const response=pm.response.json();",
									"console.log(response);",
									"pm.collectionVariables.set(\"studentId\", response.userId);",
									"",
									"",
									"console.log(response.studentId);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Created\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c397efe1-161b-47b2-98f5-ce21f93dbe3b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComment}}\",\n    \"userEduPg\": \"{{PG}}\",\n    \"userEduUg\": \"{{UG}}\",\n    \"userFirstName\": \"{{firstName}}{{serial}}\",\n    \"userLastName\": \"{{$randomLastName}}\",\n    \"userLinkedinUrl\": \"{{linkedinUrl}}\",\n    \"userLocation\": \"{{$randomCity}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{studentPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{Student}}\",\n            \"userRoleStatus\": \"{{Status1}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{timeZone1}}\",\n    \"userVisaStatus\": \"{{visaStatus1}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new Assignment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8ac39ba7-f3d7-4fc9-a731-b4ce36601dff",
								"exec": [
									"var moment=require('moment');",
									"pm.globals.set (\"dueDate\",moment().add(1,'days').format());",
									"",
									"// const num=pm.collectionVariables.set(\"serial\") ",
									"// pm.environment.set(\"counter\",num );",
									"// let counter = pm.environment.get(\"counter\");",
									"// counter ++ // increment by 1",
									"// pm.collectionVariables.set(\"serial\", counter);",
									"",
									"var CrassignmentName = pm.variables.get(\"programNameAssign\")+\"-SQL-\" + pm.variables.replaceIn('{{$randomInt}}');",
									"pm.environment.set(\"assignmentName\",CrassignmentName);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7f0b1087-a35b-4043-8d75-ad8358434ec8",
								"exec": [
									"const response=pm.response.json();",
									"console.log(response);",
									"//Set environment variable",
									"pm.environment.set(\"assignmentId1\", response.assignmentId);",
									"console.log(response.assignmentId1);",
									"",
									"//Validating Status code",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"//Validating values on Response Body",
									"pm.test(\"Validate Response Body values\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"assignmentId\");",
									"    pm.expect(pm.response.text()).to.include(\"assignmentDescription\");",
									"    pm.expect(pm.response.text()).to.include(\"assignmentName\");",
									"});",
									"",
									"// Validating JSON value ",
									"pm.test(\"Validate JSON data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.assignmentId).to.eql(response.assignmentId);",
									"});",
									"",
									"",
									"//Validating Response Header has content-type",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "033cf4bb-78cf-4864-9c3a-a628b3bf47a0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"assignmentDescription\": \"{{assignmentDesc2}}\",\n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": {{batchId}},\n  \"comments\": \"{{userComment}}\",\n  \"createdBy\": \"{{userId}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{userId}}\",\n  \"pathAttachment1\": \"{{filepath1}}\",\n  \"pathAttachment2\": \"{{filepath2}}\",\n  \"pathAttachment3\": \"{{filepath3}}\",\n  \"pathAttachment4\": \"{{filepath4}}\",\n  \"pathAttachment5\": \"{{filepath5}}\"\n\n  }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments"
					},
					"response": []
				},
				{
					"name": "Submit  the  Assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6445cf69-d3f2-4d3b-bfc1-96305ef3196e",
								"exec": [
									"//Parse the json response",
									"const response=pm.response.json();",
									"console.log(response);",
									"",
									"//Set Environment variable",
									"pm.environment.set(\"submissionIdUser\", response.submissionId);",
									"",
									"console.log(response.submissionId);",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Created\");",
									"});",
									"",
									"//Validating Status code",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"//Validating values on Response Body",
									"pm.test(\"Validate Response Body values\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"submissionId\");",
									"    pm.expect(pm.response.text()).to.include(\"assignmentId\");",
									"    pm.expect(pm.response.text()).to.include(\"userId\");",
									"});",
									"",
									"// Validating JSON value ",
									"pm.test(\"Validate JSON data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.submissionId).to.eql(response.submissionId);",
									"});",
									"",
									"//Validating Response Header has content-type",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									"",
									"const expectedSchema = ",
									"{",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"submissionId\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"assignmentId\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"userId\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"subDesc\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"subComments\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"subPathAttach1\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"subPathAttach2\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"subPathAttach3\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"subPathAttach4\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"subPathAttach5\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"subDateTime\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"gradedBy\": {",
									"      \"type\": \"null\"",
									"    },",
									"    \"gradedDateTime\": {",
									"      \"type\": \"null\"",
									"    },",
									"    \"grade\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"submissionId\",",
									"    \"assignmentId\",",
									"    \"userId\",",
									"    \"subDesc\",",
									"    \"subComments\",",
									"    \"subPathAttach1\",",
									"    \"subPathAttach2\",",
									"    \"subPathAttach3\",",
									"    \"subPathAttach4\",",
									"    \"subPathAttach5\",",
									"    \"subDateTime\",",
									"    \"gradedBy\",",
									"    \"gradedDateTime\",",
									"    \"grade\"",
									"  ]",
									"}",
									"",
									"//JSON Schema Validation",
									"pm.test('Validating JSON Schema using AJV',  ()=> {",
									"    pm.response.to.have.jsonSchema(expectedSchema);",
									"   ",
									"});",
									"",
									"pm.test(\"Status code should have message Created\", function () {",
									"    pm.response.to.have.status(\"Created\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c7f1bf81-6b27-463e-b334-0a0c2450917a",
								"exec": [
									"var moment=require('moment');",
									"pm.globals.set (\"subDateTime\",moment().format(\"MM-DD-YYYY HH:mm:ss\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "586ef83c-d8b0-4383-b589-b07f203f0caf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{        \"assignmentId\": \"{{assignmentId1}}\",\n        \"userId\": \"{{userId}}\",\n        \"subComments\": \"{{comments}}\",\n        \"subDesc\": \"{{assignmentDesc3}}\",\n        \"subPathAttach1\": \"{{filepath1}}\",\n        \"subPathAttach2\": \"{{filepath2}}\",\n        \"subPathAttach3\": \"{{filepath3}}\",\n        \"subPathAttach4\": \"{{filepath4}}\",\n        \"subPathAttach5\": \"{{filepath5}}\",\n        \"subDateTime\": \"{{subDateTime}}\"\n        \n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignmentsubmission"
					},
					"response": []
				},
				{
					"name": "All Assignment Submissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validating status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Parsing the json response ",
									"const response=pm.response.json();",
									"console.log(response);",
									"",
									"",
									"//Validating response body string values",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"submissionId\");",
									"    pm.expect(pm.response.text()).to.include(\"assignmentId\");",
									"    pm.expect(pm.response.text()).to.include(\"userId\");",
									"    pm.expect(pm.response.text()).to.include(\"subDesc\");",
									"    pm.expect(pm.response.text()).to.include(\"subDateTime\");",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "20b4f7fc-7821-4fbb-a7e7-cd90dd228b00"
							}
						}
					],
					"id": "e41aba49-81e2-471e-b92f-9dc9bd098151",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignmentsubmission"
					},
					"response": []
				},
				{
					"name": "GET Assignment submission by UserID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Parsing the json response ",
									"const response=pm.response.json();",
									"console.log(response);",
									"",
									"//Validate Status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Storing json schema in a variable",
									"const expectedSchema = ",
									"{",
									"  \"type\": \"array\",",
									"  \"items\": [",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"submissionId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"assignmentId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"userId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"subDesc\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"subComments\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"subPathAttach1\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"subDateTime\": {",
									"          \"type\": \"string\"",
									"        },",
									"        ",
									"        \"grade\": {",
									"          \"type\": \"integer\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"submissionId\",",
									"        \"assignmentId\",",
									"        \"userId\",",
									"        \"subDesc\",",
									"        \"subComments\",",
									"        \"subPathAttach1\",",
									"        \"subDateTime\",",
									"        \"gradedBy\",",
									"        \"gradedDateTime\",",
									"        \"grade\"",
									"      ]",
									"    }",
									"  ]",
									"};",
									"",
									"var jsonResponse=pm.response.json();",
									"",
									"//JSON Schema Validation",
									"pm.test('Validating JSON Schema using Tiny Validator', ()=> {",
									"    pm.expect(tv4.validate(jsonResponse,expectedSchema)).to.be.true;",
									" ",
									"});",
									"",
									"//JSON Schema Validation",
									"pm.test('Validating JSON Schema using AJV',  ()=> {",
									"    pm.response.to.have.jsonSchema(expectedSchema);",
									"   ",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "6d35fcf7-ea1d-4441-a5d9-dc26a8bfd8f8"
							}
						}
					],
					"id": "45bfea12-4557-4c7e-97f0-82e89b7f000f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignmentsubmission/student/{{userId}}"
					},
					"response": []
				},
				{
					"name": "GET Assignment submission by  BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"//Validating values on Response Body",
									"pm.test(\"Validate Response Body values\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"submissionId\");",
									"    pm.expect(pm.response.text()).to.include(\"assignmentId\");",
									"    pm.expect(pm.response.text()).to.include(\"userId\");",
									"});"
								],
								"type": "text/javascript",
								"id": "81412d40-c82a-49b8-8211-50685b02eb74"
							}
						}
					],
					"id": "724c0dc4-3e65-43f4-9af5-917a079349f6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignmentsubmission/studentbatch/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update Assignment Due date",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment=require('moment');",
									"pm.globals.set (\"dueDate\",moment().format());"
								],
								"type": "text/javascript",
								"id": "43833d99-aa03-47a4-a790-fb459a25f58f"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response=pm.response.json();",
									"console.log(response);",
									"//Set environment variable",
									"//pm.environment.set(\"assignmentId\", response.assignmentId);",
									"console.log(response.assignmentId);",
									"",
									"//Validating Status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Validating values on Response Body",
									"pm.test(\"Validate Response Body values\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"assignmentId\");",
									"    pm.expect(pm.response.text()).to.include(\"assignmentDescription\");",
									"    pm.expect(pm.response.text()).to.include(\"assignmentName\");",
									"});",
									"",
									"// Validating JSON value ",
									"pm.test(\"Validate JSON data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.assignmentId).to.eql(response.assignmentId);",
									"});",
									"",
									"",
									"//Validating Response Header has content-type",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "5468cfbb-93e8-4953-a9ac-f4abe98533c0"
							}
						}
					],
					"id": "5281d09a-0561-4872-b016-ec1e0350e035",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \"assignmentDescription\": \"{{assignmentDesc1}}\",\n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": {{batchId}},\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{userId}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{userId}}\"\n     }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments/{{assignmentId1}}"
					},
					"response": []
				},
				{
					"name": "Submit  Assignment post due date",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ee2d3701-b985-4a89-bd4a-6422e7155568"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response=pm.response.json();",
									"console.log(response);",
									"",
									"//Validate Status code",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Validating response body values\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"message\");",
									"     pm.expect(pm.response.text()).to.include(\"success\");",
									"});",
									"",
									"pm.test(\"Validating response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Validate message and success details",
									"pm.test(\"Validating response body message\", ()=> {",
									"    pm.expect(pm.response.json().message).to.eql(\"Cannot submit assignment post due date\");",
									"      pm.expect(pm.response.json().success).to.eql(false);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "af93dec5-bb5c-4eb3-9591-a01dd11cccd9"
							}
						}
					],
					"id": "115987f6-b979-420d-b659-a2d7dc85aff4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{        \"assignmentId\": {{postDueId}},\n        \"userId\": \"{{userId}}\",\n        \"subDesc\": \"{{assignmentDesc3}}\",\n        \"subPathAttach1\": \"file1.json\",\n        \"subPathAttach2\": \"file2.json\",\n        \"subPathAttach3\": \"file3.json\",\n        \"subPathAttach4\": \"file4.json\",\n        \"subPathAttach5\": \"file5.json\",\n        \"subDateTime\": \"{{postDueDate}}\"\n        \n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignmentsubmission"
					},
					"response": []
				},
				{
					"name": "Grade Assignment Submission",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fbc9b294-2afc-48cc-81dc-e974cefe1de4",
								"exec": [
									"const response=pm.response.json();",
									"console.log(response);",
									"//Set environment variable",
									"//pm.environment.set(\"assignmentId\", response.assignmentId);",
									"console.log(response.assignmentId);",
									"",
									"//Validating Status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"//Validating values on Response Body",
									"pm.test(\"Validate Response Body values\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"assignmentId\");",
									"    pm.expect(pm.response.text()).to.include(\"gradedBy\");",
									"    pm.expect(pm.response.text()).to.include(\"grade\");",
									"});",
									"",
									"// Validating JSON value ",
									"pm.test(\"Validate JSON data\", function () {",
									"    pm.expect(response).to.be.an(\"object\");",
									"    pm.expect(response.assignmentId).to.eql(pm.variables.get(\"assignmentId1\"));",
									"    pm.expect(response.gradedBy).to.eql(pm.variables.get(\"userId\"));",
									"   ",
									"});",
									"",
									"",
									"//Validating Response Header has content-type",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "55e42fd5-0967-4ebc-9502-2994f8a7b3a7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n        \n        \"gradedBy\": \"{{userId}}\",\n        \"grade\": 2\n    }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignmentsubmission/gradesubmission/{{submissionIdUser}}"
					},
					"response": []
				},
				{
					"name": "Create new Assignment [student  submission]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment=require('moment');",
									"pm.globals.set (\"dueDate\",moment().add(1,'days').format());",
									"",
									"pm.environment.set(\"counter\",111);",
									"let counter = pm.environment.get(\"counter\");",
									"counter ++ // increment by 1",
									"pm.collectionVariables.set(\"serial\", counter);"
								],
								"type": "text/javascript",
								"id": "1e3c123a-9213-44ae-af6f-c3cf0efe9675"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response=pm.response.json();",
									"console.log(response);",
									"//Set environment variable",
									"pm.environment.set(\"assignmentId2\", response.assignmentId);",
									"console.log(response.assignmentId2);",
									"",
									"//Validating Status code",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"//Validating values on Response Body",
									"pm.test(\"Validate Response Body values\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"assignmentId\");",
									"    pm.expect(pm.response.text()).to.include(\"assignmentDescription\");",
									"    pm.expect(pm.response.text()).to.include(\"assignmentName\");",
									"});",
									"",
									"// Validating JSON value ",
									"pm.test(\"Validate JSON data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.assignmentId).to.eql(response.assignmentId);",
									"});",
									"",
									"",
									"//Validating Response Header has content-type",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "eb68b810-1079-4541-ba5b-2a7083a50845"
							}
						}
					],
					"id": "7b0255ef-7811-428e-973f-7ae1646e7941",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"assignmentDescription\": \"{{assignmentDesc3}}\",\n  \"assignmentName\": \"{{assignmentName}}{{serial}}\",\n  \"batchId\": {{batchId}},\n  \"comments\": \"{{userComment}}\",\n  \"createdBy\": \"{{userId}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{userId}}\",\n  \"pathAttachment1\": \"{{filepath1}}\",\n  \"pathAttachment2\": \"{{filepath2}}\",\n  \"pathAttachment3\": \"{{filepath3}}\",\n  \"pathAttachment4\": \"{{filepath4}}\",\n  \"pathAttachment5\": \"{{filepath5}}\"\n\n  }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments"
					},
					"response": []
				},
				{
					"name": "Submit  the  Assignment [Student]",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b33f8799-dc4f-4eab-b8a5-e22c242bd850",
								"exec": [
									"//Parse the json response",
									"const response=pm.response.json();",
									"console.log(response);",
									"",
									"//Set Environment variable",
									"pm.environment.set(\"submissionIdStudent\", response.submissionId);",
									"",
									"",
									"console.log(response.submissionIdStudent);",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Created\");",
									"});",
									"",
									"//Validating Status code",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"//Validating values on Response Body",
									"pm.test(\"Validate Response Body values\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"submissionId\");",
									"    pm.expect(pm.response.text()).to.include(\"assignmentId\");",
									"    pm.expect(pm.response.text()).to.include(\"userId\");",
									"});",
									"",
									"// Validating JSON value ",
									"pm.test(\"Validate JSON data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.submissionId).to.eql(response.submissionId);",
									"});",
									"",
									"//Validating Response Header has content-type",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									"",
									"const expectedSchema = ",
									"{",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"submissionId\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"assignmentId\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"userId\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"subDesc\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"subComments\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"subPathAttach1\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"subPathAttach2\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"subPathAttach3\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"subPathAttach4\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"subPathAttach5\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"subDateTime\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"gradedBy\": {",
									"      \"type\": \"null\"",
									"    },",
									"    \"gradedDateTime\": {",
									"      \"type\": \"null\"",
									"    },",
									"    \"grade\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"submissionId\",",
									"    \"assignmentId\",",
									"    \"userId\",",
									"    \"subDesc\",",
									"    \"subComments\",",
									"    \"subPathAttach1\",",
									"    \"subPathAttach2\",",
									"    \"subPathAttach3\",",
									"    \"subPathAttach4\",",
									"    \"subPathAttach5\",",
									"    \"subDateTime\",",
									"    \"gradedBy\",",
									"    \"gradedDateTime\",",
									"    \"grade\"",
									"  ]",
									"}",
									"",
									"//JSON Schema Validation",
									"pm.test('Validating JSON Schema using AJV',  ()=> {",
									"    pm.response.to.have.jsonSchema(expectedSchema);",
									"   ",
									"});",
									"",
									"pm.test(\"Status code should have message Created\", function () {",
									"    pm.response.to.have.status(\"Created\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ae673c9c-1023-4c67-89a4-efd6668a3d8c",
								"exec": [
									"var moment=require('moment');",
									"pm.globals.set (\"subDateTime\",moment().format(\"MM-DD-YYYY HH:mm:ss\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "61c74945-5033-42ae-8cee-9bfbc34c5b70",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{        \"assignmentId\": {{assignmentId2}},\n        \"userId\": \"{{studentId}}\",\n        \"subComments\": \"{{comments}}\",\n        \"subDesc\": \"{{assignmentDesc3}}\",\n        \"subPathAttach1\": \"{{filepath1}}\",\n        \"subPathAttach2\": \"{{filepath2}}\",\n        \"subPathAttach3\": \"{{filepath3}}\",\n        \"subPathAttach4\": \"{{filepath4}}\",\n        \"subPathAttach5\": \"{{filepath5}}\",\n        \"subDateTime\": \"{{subDateTime}}\"\n        \n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignmentsubmission"
					},
					"response": []
				},
				{
					"name": "Grades  by  Assignment ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", ()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"const expectedSchema = ",
									"{",
									"  ",
									"  \"type\": \"array\",",
									"  \"items\": [",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"submissionId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"assignmentId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"userId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"subDesc\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"subComments\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"subDateTime\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"gradedBy\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"gradedDateTime\": {",
									"          \"type\": \"null\"",
									"        },",
									"        \"grade\": {",
									"          \"type\": \"integer\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"submissionId\",",
									"        \"assignmentId\",",
									"        \"userId\",",
									"        \"subDesc\",",
									"        \"subComments\",",
									"        \"subDateTime\",",
									"        \"gradedBy\",",
									"        \"gradedDateTime\",",
									"        \"grade\"",
									"      ]",
									"    }",
									"  ]",
									"};",
									"",
									"var jsonResponse=pm.response.json();",
									"",
									"pm.test('Validating JSON Schema using Tiny Validator', ()=> {",
									"    pm.expect(tv4.validate(jsonResponse,expectedSchema)).to.be.true;",
									" ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "b2008484-6b77-474a-8c84-289374bdaf58"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "74b52e7c-e1a8-4ff5-82b1-313cb32f8a62"
							}
						}
					],
					"id": "27c450e5-f752-4735-8625-d67bc1953ceb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignmentsubmission/getGrades/{{assignmentId1}}"
					},
					"response": []
				},
				{
					"name": "Grades  by  Student ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "54de6aeb-576d-485d-bb83-16934b605b44"
							}
						}
					],
					"id": "5b8e247d-f3f6-4d13-a6bc-164b1b8635c9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignmentsubmission/getGradesByStudentId/{{studentId}}"
					},
					"response": []
				},
				{
					"name": "Grades  by  Batch ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "0146a699-99d0-4c82-9a02-8f6821443f9c"
							}
						}
					],
					"id": "8aee7107-63a7-458a-9fca-af0b2cc67de4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignmentsubmission/grades/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Grades  by  invalid Assignment ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 \", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Status Code Message\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"message\");",
									"    pm.expect(pm.response.text()).to.include(\"Assignment not found with Id :\");",
									"    pm.expect(pm.response.text()).to.include(\"success\");",
									"    pm.expect(pm.response.text()).to.include(\"false\");",
									"});",
									"",
									"",
									"",
									"//Validate message and success details",
									"pm.test(\"Validating response body message\", ()=> {",
									"    pm.expect(pm.response.json().message).to.eql(\"Assignment not found with Id : \"+pm.collectionVariables.get(\"invalidID\")+\" \");",
									"      pm.expect(pm.response.json().success).to.eql(false);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});"
								],
								"type": "text/javascript",
								"id": "f109a0fe-b5d3-4cd2-a1b2-e219974e5beb"
							}
						}
					],
					"id": "59e099a9-a032-46d6-ae08-399791d397b8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignmentsubmission/getGrades/{{invalidID}}"
					},
					"response": []
				},
				{
					"name": "Grades  by  invalid Student ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 \", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Status Code Message\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"message\");",
									"    pm.expect(pm.response.text()).to.include(\"Student not found with Student ID\");",
									"    pm.expect(pm.response.text()).to.include(\"success\");",
									"    pm.expect(pm.response.text()).to.include(\"false\");",
									"});",
									"",
									"",
									"//Validate message and success details",
									"pm.test(\"Validating response body message\", ()=> {",
									"    pm.expect(pm.response.json().message).to.eql(\"Student not found with Student ID:  : \"+pm.collectionVariables.get(\"invalidID\")+\" \");",
									"      pm.expect(pm.response.json().success).to.eql(false);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});"
								],
								"type": "text/javascript",
								"id": "98c942cf-7273-45ae-a0fd-f590691173a7"
							}
						}
					],
					"id": "79e70510-7c4d-48ff-8c7f-fdc659b46257",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignmentsubmission/getGradesByStudentId/{{invalidID}}"
					},
					"response": []
				},
				{
					"name": "Grades  by  invalid Batch ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 \", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Status Code Message\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"message\");",
									"    pm.expect(pm.response.text()).to.include(\"Assignments with grades does not exist for Batch ID \");",
									"    pm.expect(pm.response.text()).to.include(\"success\");",
									"    pm.expect(pm.response.text()).to.include(\"false\");",
									"});",
									"",
									"",
									"//Validate message and success details",
									"pm.test(\"Validating response body message\", ()=> {",
									"    pm.expect(pm.response.json().message).to.eql(\"Assignments with grades does not exist for Batch ID : \"+pm.collectionVariables.get(\"invalidBatchId\"));",
									"      pm.expect(pm.response.json().success).to.eql(false);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});"
								],
								"type": "text/javascript",
								"id": "4a650000-8cca-4861-ad46-7a428e42045b"
							}
						}
					],
					"id": "d9886432-5cbd-4ba6-b1ee-a7cfda17f394",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignmentsubmission/grades/{{invalidBatchId}}"
					},
					"response": []
				},
				{
					"name": "GET Assignment submission by invalid UserID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 \", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Status Code Message\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"message\");",
									"    pm.expect(pm.response.text()).to.include(\"User not found with UserID\");",
									"    pm.expect(pm.response.text()).to.include(\"success\");",
									"    pm.expect(pm.response.text()).to.include(\"false\");",
									"});",
									"",
									"",
									"//Validate message and success details",
									"pm.test(\"Validating response body message\", ()=> {",
									"    pm.expect(pm.response.json().message).to.eql(\"User not found with UserID : \"+pm.collectionVariables.get(\"invalidID\")+\" \");",
									"      pm.expect(pm.response.json().success).to.eql(false);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});"
								],
								"type": "text/javascript",
								"id": "46f368b0-c659-4a2b-a77a-4f2d52ce63bc"
							}
						}
					],
					"id": "218bc9da-f28c-4ab4-867a-7be1bc4f9a4c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignmentsubmission/student/{{invalidID}}"
					},
					"response": []
				},
				{
					"name": "GET Assignment submission by  invalid BatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 \", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Status Code Message\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"message\");",
									"    pm.expect(pm.response.text()).to.include(\"User not found with UserID\");",
									"    pm.expect(pm.response.text()).to.include(\"success\");",
									"    pm.expect(pm.response.text()).to.include(\"false\");",
									"});",
									"",
									"",
									"//Validate message and success details",
									"pm.test(\"Validating response body message\", ()=> {",
									"    pm.expect(pm.response.json().message).to.eql(\"User not found with UserID : \"+pm.collectionVariables.get(\"invalidBatchId\")+\" \");",
									"      pm.expect(pm.response.json().success).to.eql(false);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});"
								],
								"type": "text/javascript",
								"id": "90e86d29-7f0d-4a95-8ea7-2a499e2bc949"
							}
						}
					],
					"id": "5d7a4edb-6bd2-4e4d-9a89-45beb9148a7f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignmentsubmission/student/{{invalidBatchId}}"
					},
					"response": []
				},
				{
					"name": "Submit  Assignment with  missing  userId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "502c0e58-d5e2-4de0-9ca2-af10a55ec778"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(response);",
									"",
									"//Validate Status code",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Validate Response body\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"message\");",
									"    pm.expect(pm.response.text()).to.include(\"User ID is mandatory\");",
									"    pm.expect(pm.response.text()).to.include(\"success\");",
									"    pm.expect(pm.response.text()).to.include(false);",
									"",
									"});",
									"",
									"pm.test(\"Validate json data value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User ID is mandatory\\n \");",
									"    pm.expect(jsonData.success).to.eql(false);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "c0c61832-41f9-460b-99d7-d4a86f7aced7"
							}
						}
					],
					"id": "7904fbc8-c0d2-40ed-b62f-228a27dc93ca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{        \"assignmentId\": {{assignmentId}},\n        \"userId\": \"\",\n        \"subComments\": \"{{comments}}\",\n        \"subDesc\": \"{{assignmentDesc3}}\",\n        \"subPathAttach1\": \"{{filepath1}}\",\n        \"subPathAttach2\": \"{{filepath2}}\",\n        \"subPathAttach3\": \"{{filepath3}}\",\n        \"subPathAttach4\": \"{{filepath4}}\",\n        \"subPathAttach5\": \"{{filepath5}}\",\n        \"subDateTime\": \"{{subDateTime}}\"\n        \n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignmentsubmission"
					},
					"response": []
				},
				{
					"name": "Submit  Assignment with missing assignmentId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "cfe69d64-c83b-4f26-af9c-e4257235ac4a"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(response);",
									"",
									"//Validate Status code",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//Validate Response body",
									"pm.test(\"Validate Response body\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"message\");",
									"    pm.expect(pm.response.text()).to.include(\"Assignment ID is mandatory\");",
									"    pm.expect(pm.response.text()).to.include(\"success\");",
									"    pm.expect(pm.response.text()).to.include(false);",
									"",
									"});",
									"",
									"//Json data value",
									"pm.test(\"Validate json value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Assignment ID is mandatory\\n \");",
									"    pm.expect(jsonData.success).to.eql(false);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "17744f85-16dc-45ab-b995-63376de0139d"
							}
						}
					],
					"id": "980dbf65-4d71-4c4b-b7c0-c820e813c6d5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{       \n        \"userId\": \"{{U3794}}\",\n        \"subDesc\": \"{{assignmentDesc3}}\",\n        \"subComments\": \"{{comments}}\",\n        \"subPathAttach1\": \"{{filepath1}}\",\n        \"subPathAttach2\": \"{{filepath2}}\",\n        \"subPathAttach3\": \"{{filepath3}}\",\n        \"subPathAttach4\": \"{{filepath4}}\",\n        \"subPathAttach5\": \"{{filepath5}}\",\n        \"subDateTime\": \"{{subDateTime}}\"\n        \n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignmentsubmission"
					},
					"response": []
				},
				{
					"name": "Submit  Assignment with missing subDesc",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c2ff5710-e25e-499e-91f8-71b18b703b2a"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"console.log(response);",
									"",
									"//Validate Status code",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//Validate Response body",
									"pm.test(\"Validate Response body\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"message\");",
									"    pm.expect(pm.response.text()).to.include(\"Submission description is mandatory\");",
									"    pm.expect(pm.response.text()).to.include(\"success\");",
									"    pm.expect(pm.response.text()).to.include(false);",
									"",
									"});",
									"",
									"//Json data value",
									"pm.test(\"Validate json value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Submission description is mandatory\\n \");",
									"    pm.expect(jsonData.success).to.eql(false);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "48c7ec8f-5732-486f-b7eb-731b68ea4115"
							}
						}
					],
					"id": "11bfb776-8a84-4c80-9ecd-a2460b7209aa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{        \"assignmentId\": {{assignmentId}},\n        \"userId\": \"{{userId}}\",\n        \"subComments\": \"{{comments}}\",\n       \n        \"subPathAttach1\": \"{{filepath1}}\",\n        \"subPathAttach2\": \"{{filepath2}}\",\n        \"subPathAttach3\": \"{{filepath3}}\",\n        \"subPathAttach4\": \"{{filepath4}}\",\n        \"subPathAttach5\": \"{{filepath5}}\",\n        \"subDateTime\": \"{{subDateTime}}\"\n        \n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignmentsubmission"
					},
					"response": []
				},
				{
					"name": "Resubmit Assignment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment=require('moment');",
									"pm.globals.set (\"subDateTimeResubmit\",moment().add(1,'hours').format(\"MM-DD-YYYY HH:mm:ss\"));",
									"//pm.globals.set (\"dueDate\",moment().subtract(1,'days').format());",
									""
								],
								"type": "text/javascript",
								"id": "53fcf974-37bf-4a90-9b01-f2f6bf0d6b08"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Parse the json response",
									"const response=pm.response.json();",
									"console.log(response);",
									"",
									"//Set Environment variable",
									"pm.environment.set(\"resubmissionIdStudent\", response.submissionId);",
									"",
									"console.log(response.submissionId);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Validating values on Response Body",
									"pm.test(\"Validate Response Body values\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"submissionId\");",
									"    pm.expect(pm.response.text()).to.include(\"assignmentId\");",
									"    pm.expect(pm.response.text()).to.include(\"userId\");",
									"});",
									"",
									"// Validating JSON value ",
									"pm.test(\"Validate JSON data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.submissionId).to.eql(response.submissionId);",
									"});",
									"",
									"//Validating Response Header has content-type",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									"",
									"pm.test(\"Status code should have message Created\", function () {",
									"    pm.response.to.have.status(\"Created\");",
									"});"
								],
								"type": "text/javascript",
								"id": "c80746eb-8b0b-4de5-9a4c-d17357a1d06e"
							}
						}
					],
					"id": "aa6f90a3-a593-433d-b770-304b9bf2ece9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{        \"assignmentId\": \"{{assignmentId2}}\",\n        \"userId\": \"{{studentId}}\",\n        \"subComments\": \"{{resubmitComments}}\",\n        \"subDesc\": \"{{assignmentDesc1}}\",\n        \"subPathAttach1\": \"{{filepath1}}\",\n        \"subPathAttach2\": \"{{filepath2}}\",\n        \"subPathAttach3\": \"{{filepath3}}\",\n        \"subPathAttach4\": \"{{filepath4}}\",\n        \"subPathAttach5\": \"{{filepath5}}\",\n        \"subDateTime\": \"{{subDateTimeResubmit}}\"\n        \n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignmentsubmission/{{submissionIdStudent}}"
					},
					"response": []
				},
				{
					"name": "Delete Assignment submission 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e24db3d2-2939-482a-8786-5b7829c3b11b",
								"exec": [
									"const response=pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "480d24e4-338e-450c-9a16-184ff6a5649c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/assignmentsubmission/{{submissionIdUser}}"
					},
					"response": []
				},
				{
					"name": "Delete Assignment submission by student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response=pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "62d26305-44f7-419a-a818-d22d7f5d0e0a"
							}
						}
					],
					"id": "bae38cb5-08f5-4cce-8a56-c05de0172f7e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/assignmentsubmission/{{submissionIdStudent}}"
					},
					"response": []
				},
				{
					"name": "Delete Assignment submission by invalid submissionId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response=pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "cfef9594-60fe-4970-b8ba-b1b4e00a55a9"
							}
						}
					],
					"id": "3b4e967c-46fa-4583-b4c9-f3758d464ae7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/assignmentsubmission/{{invalidID}}"
					},
					"response": []
				},
				{
					"name": "DELETE Assignment  1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response=pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"//Json data value",
									"pm.test(\"Validate json value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Assignment deleted successfully\");",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "8b1ca6a1-1765-4597-9b54-7c4643954f2f"
							}
						}
					],
					"id": "96e5abc0-66f5-4d73-adaa-cdc062dac2cd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/assignments/{{assignmentId1}}"
					},
					"response": []
				},
				{
					"name": "DELETE Assignment  2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response=pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"//Json data value",
									"pm.test(\"Validate json value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Assignment deleted successfully\");",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "bb4dbddf-f138-44a5-9eac-acafb5af9989"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4841d0f4-1d8a-443f-b47b-d66ca9b9c9ef"
							}
						}
					],
					"id": "3aec624f-e1d7-4253-8307-b77b4da6cb2d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/assignments/{{assignmentId2}}"
					},
					"response": []
				},
				{
					"name": "DELETE  Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c79c7a0-d18c-486d-977d-7e9b42d6a414",
								"exec": [
									"const response=pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"// //Validating values on Response Body",
									"// pm.test(\"Validate Response Body values\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"Deleted User ID\");",
									"// });",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ddb43fc3-9b9b-44a6-b428-0512a752563e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/users/users/{{userId}}"
					},
					"response": []
				},
				{
					"name": "DELETE  Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response=pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"//Json data value",
									"pm.test(\"Validate json value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User deleted successfully\");",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "cf74164d-cc50-44d7-8707-a0761ee6f2c4"
							}
						}
					],
					"id": "4ceeccbd-f9cd-4d46-bca1-e3f539f568f8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/users/users/{{studentId}}"
					},
					"response": []
				},
				{
					"name": "DELETE Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Message\");",
									"     pm.expect(pm.response.text()).to.include(\"deleted Successfully!\");",
									"       pm.expect(pm.response.text()).to.include(\"Batch with Id-\");",
									"",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"//Json data value",
									"pm.test(\"Validate json value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.Message).to.eql(\"Batch with Id-\"+ pm.environment.get(\"batchId\")+\" deleted Successfully! \");",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "9738a7b1-70a0-49ec-b9fa-a4c2ad571622"
							}
						}
					],
					"id": "fe63cd24-ee5a-46b6-97cc-857a5802082e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "DELETE  Program by ProgramName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "65289167-fd68-43a1-9f43-1c183a76b651",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Status code name has string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"//Json data value",
									"pm.test(\"Validate json value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.Message).to.eql(\"Program Name -\"+pm.collectionVariables.get(\"resPgmName\")+\" is deleted Successfully!\");",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"//Deleting variables",
									"pm.environment.unset(\"batchId\");",
									"pm.environment.unset(\"assignmentId1\");",
									"pm.environment.unset(\"assignmentId2\");",
									"pm.environment.unset(\"submissionIdUser\");",
									"pm.environment.unset(\"submissionIdStudent\");",
									"pm.environment.unset(\"counter\");",
									"pm.environment.unset(\"userId\")",
									"",
									"//Deleting global variables",
									"// pm.globals.unset(\"subDateTime\");",
									"// pm.globals.unset(\"currentTime\");",
									"// pm.globals.unset(\"dueDate\");",
									"// pm.globals.unset(\"submissionId\");",
									"// pm.globals.unset(\"subDateTimeResubmit\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d8800e1f-e8d0-4444-abb9-5e2d452dbc7a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogname/{{resPgmName}}"
					},
					"response": []
				}
			],
			"id": "cd3977b4-fce9-4e9d-bb7d-6e677620f281",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "957f7b51-da9a-4df8-8d59-703be387d58f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c7ff0761-4356-4bf8-a6b1-742979524e94",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8e3d34ea-b25a-4317-b9b2-a8251ce9715d",
				"type": "text/javascript",
				"exec": [
					"// Load data from file",
					"if(typeof pm.variables.get('requestData') !== 'object')",
					"{",
					"    pm.variables.set('requestData', pm.iterationData.toObject());",
					"}",
					"",
					"const requestData = pm.variables.get('requestData');",
					"",
					"if(typeof requestData != 'object' || Object.keys(requestData).length === 0)",
					"{",
					"    console.log('No external data provided/data set is empty');",
					"    return;",
					"}",
					"",
					"// Find current request",
					"const currentRequest = requestData.requests.filter(({name}) => name === pm.info.requestName)[0];",
					"",
					"// If no data",
					"if(!currentRequest)",
					"{",
					"    console.log('Request ${pm.info.requestName} has no data.');",
					"}",
					"",
					"if(currentRequest)",
					"{",
					"    // Expose variables",
					"    const variables = currentRequest.data.shift();",
					"",
					"    Object.entries(variables).forEach(([key, value]) => {",
					"        pm.variables.set(key, value);",
					"    });",
					"",
					"    pm.variables.set('requestData', requestData);",
					"",
					"    // Declare next request",
					"    if(currentRequest.data.length > 0)",
					"    {",
					"        postman.setNextRequest(pm.info.requestName);",
					"    }",
					"}",
					"",
					"",
					"",
					"//Unique assignment name generator",
					"const assignmentname = Math.floor((Math.random()*100 +1));",
					"pm.globals.set(\"assignmentname\", assignmentname);",
					"",
					"",
					"//Random numer",
					"const programnumber = Math.floor((Math.random()*100 +1));",
					"pm.globals.set(\"programnumber\", programnumber);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "61331e98-3d84-4870-82da-3681cb4cbde2",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "197b857d-54c5-4598-a3ac-c38c3cf3bf23",
			"key": "BaseURL",
			"value": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms",
			"type": "string"
		},
		{
			"id": "a93faedb-d705-4d03-a0ed-4eea6b8238aa",
			"key": "userComments",
			"value": "creating new user",
			"type": "string"
		},
		{
			"id": "ddb44f5f-af91-446a-9282-5adb9bf624ad",
			"key": "userEduPg",
			"value": "MS",
			"type": "string"
		},
		{
			"id": "0449882f-1125-429f-ac10-9b7cd9fad7dc",
			"key": "userFirstName",
			"value": "APICollectors_",
			"type": "string"
		},
		{
			"id": "8d611d60-5fa5-4ba4-a2bf-c276aa11625c",
			"key": "adminUserFirstName",
			"value": "APICollectors_",
			"type": "string"
		},
		{
			"id": "7781cd1c-3f17-450a-958a-cc943d3cd25d",
			"key": "staffUserFirstName",
			"value": "APICollectors_",
			"type": "string"
		},
		{
			"id": "b42ef4c9-c823-445a-9f95-2921953d4ea5",
			"key": "studentUserFirstName",
			"value": "APICollectors_",
			"type": "string"
		},
		{
			"id": "9931b06f-7abd-4f79-b1d9-e8cc62b25ff0",
			"key": "userLastName",
			"value": "User",
			"type": "string"
		},
		{
			"id": "03570bfb-bc0e-459a-bd86-1ddc40f08767",
			"key": "userLinkedinUrl",
			"value": "www.linkedin.com/Test1234",
			"type": "string"
		},
		{
			"id": "4700a668-3e04-4e51-b544-06eef2c65894",
			"key": "userLocation",
			"value": "India",
			"type": "string"
		},
		{
			"id": "1293b1b2-7d36-4e31-8f7d-6e6638aa8098",
			"key": "userMiddleName",
			"value": "",
			"type": "string"
		},
		{
			"id": "424d1d67-bade-4632-a421-88121bb0972d",
			"key": "roleId",
			"value": "R02",
			"type": "string"
		},
		{
			"id": "dc046938-ae2c-4616-afa1-8d31ee96c84a",
			"key": "userRoleStatus",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "b9d01ec4-36c3-4aa3-b8fe-f1a3fc06b504",
			"key": "userTimeZone",
			"value": "IST",
			"type": "string"
		},
		{
			"id": "174d388d-4f16-4056-ab91-79afceb435d7",
			"key": "userVisaStatus",
			"value": "NA",
			"type": "string"
		},
		{
			"id": "c1779811-dbb1-4627-9310-a1f96da0cf74",
			"key": "invalidUserRoleId",
			"value": "invalidRoleID",
			"type": "string"
		},
		{
			"id": "db3859d1-f735-4ae0-bcd1-a967c7039268",
			"key": "integerUserRoleId",
			"value": "46546",
			"type": "string"
		},
		{
			"id": "0d2bff3b-5da5-496e-9f84-d542c6327226",
			"key": "invalidUserVisaStatus",
			"value": "invalidVisaStatus",
			"type": "string"
		},
		{
			"id": "07db5d9f-e68a-4010-83e3-7ebcc57745f7",
			"key": "invalidUserTimeZone",
			"value": "invalidTimeZone",
			"type": "string"
		},
		{
			"id": "07384ae3-eeb3-4c95-ab3d-fee6b677067c",
			"key": "stringUserPhoneNumber",
			"value": "strPhone",
			"type": "string"
		},
		{
			"id": "33121bb2-88ea-4dec-9f95-02f60cbf8efc",
			"key": "blankRoleId",
			"value": "",
			"type": "string"
		},
		{
			"id": "405775d9-6991-46a5-886c-b2326c2bdb5a",
			"key": "blankUserRoleStatus",
			"value": "",
			"type": "string"
		},
		{
			"id": "4c418e32-4ee1-4f4c-b2ea-d29c62f982ee",
			"key": "blankUserFirstName",
			"value": "",
			"type": "string"
		},
		{
			"id": "35f84835-b430-42f0-a6b4-071b097ac56d",
			"key": "blankUserLastName",
			"value": "",
			"type": "string"
		},
		{
			"id": "d70701ec-62fe-42a0-bc48-267dc97b93d8",
			"key": "blankUserTimeZone",
			"value": "",
			"type": "string"
		},
		{
			"id": "5774d70f-9a92-48c1-be41-df2ab54d6bc7",
			"key": "blankUserVisaStatus",
			"value": "",
			"type": "string"
		},
		{
			"id": "ee9ed070-3343-45d5-b93a-2a2e79863ab1",
			"key": "userNameCounter",
			"value": "0",
			"type": "string"
		},
		{
			"id": "bb08af3e-dbca-43d1-ac65-d39dfcf1ae9e",
			"key": "messageUpdateStatusSuccess",
			"value": "UserStatus Updated for User: ",
			"type": "string"
		},
		{
			"id": "9e7b25c7-6b52-4b5d-910f-2bef8af488cc",
			"key": "message1UpdateStatusRoleid",
			"value": "RoleID: ",
			"type": "string"
		},
		{
			"id": "61c7191b-1f38-419c-828c-9ae777d162a4",
			"key": "message2UpdateStatusRoleid",
			"value": " not found for the UserID: ",
			"type": "string"
		},
		{
			"id": "853dfc96-6cb1-4cdc-b67f-6eb2c671c444",
			"key": "messageMandatoryRoleStatus",
			"value": "Role Status is Mandatory",
			"type": "string"
		},
		{
			"id": "fe522915-68e6-4b0d-b961-12f06e81a300",
			"key": "messageMandatoryRoleid",
			"value": "Role Id is mandatory",
			"type": "string"
		},
		{
			"id": "d8eeaf14-0d92-4201-9880-ce9d2d4099d1",
			"key": "messageUpdateRoleStatusInvalidroleid",
			"value": "RoleID: invalidRoleID not found for the UserID: ",
			"type": "string"
		},
		{
			"id": "a9f23b26-5e0f-4dae-9329-0621248796fc",
			"key": "messageMissingPhone",
			"value": "Phone Number is required",
			"type": "string"
		},
		{
			"id": "c0f0cfcd-9b66-4fdb-bedb-402fb068d444",
			"key": "messageStringPhone",
			"value": "Phone Number cannot be string",
			"type": "string"
		},
		{
			"id": "306868fb-c180-4ca9-ac31-073476da4655",
			"key": "messageInvalidRoleid",
			"value": "Invalid Role id",
			"type": "string"
		},
		{
			"id": "92cecc84-3490-4595-8ec2-25065e14dd06",
			"key": "messageMandatoryFirstName",
			"value": "User First Name cannot be null or empty",
			"type": "string"
		},
		{
			"id": "d42621d0-0fb5-48d1-b80c-b14cabb81eda",
			"key": "messageMandatoryLastName",
			"value": "User Last Name cannot be null or empty",
			"type": "string"
		},
		{
			"id": "e4fcccff-809c-46dd-a7c2-ff4f74bf21a3",
			"key": "messageMandatoryTimeZone",
			"value": "Failed to create user, as 'TimeZone' is invalid !! ",
			"type": "string"
		},
		{
			"id": "82283736-2f62-49cd-baca-9d137aedd38d",
			"key": "messageMandatoryVisaStatus",
			"value": "Failed to create user, as 'Visa Status' is invalid !! ",
			"type": "string"
		},
		{
			"id": "fd92a6ad-0ec0-4efe-a5ba-134098236314",
			"key": "integerRoleStatus",
			"value": "1234",
			"type": "string"
		},
		{
			"id": "4cd1e446-af7c-4aa4-b900-7a22f0ed00b5",
			"key": "putUserComments",
			"value": "Updating user",
			"type": "string"
		},
		{
			"id": "c12f13ea-632c-451b-95e9-54031c196240",
			"key": "putUserEduPg",
			"value": "MSc",
			"type": "string"
		},
		{
			"id": "f1da24e0-4ab4-44c9-8a0d-d74fc84e2489",
			"key": "putUserEduUg",
			"value": "BSc",
			"type": "string"
		},
		{
			"id": "03a8ba4d-3e36-43f3-bac5-9b42791e3e00",
			"key": "putUserFirstName",
			"value": "APICollectors_",
			"type": "string"
		},
		{
			"id": "0398fa21-5a43-4de2-a83f-5f71dc4637f0",
			"key": "putUserLastName",
			"value": "TestUser",
			"type": "string"
		},
		{
			"id": "6eeb906f-4a0c-4933-adeb-7e2f6e635e33",
			"key": "putUserLinkedinUrl",
			"value": "www.linkedin.com/TestUser",
			"type": "string"
		},
		{
			"id": "f84f84d8-c352-407a-84cc-39543f6d33bb",
			"key": "putUserLocation",
			"value": "Canada",
			"type": "string"
		},
		{
			"id": "f1161697-0b3b-472a-9c86-81e4b65e1557",
			"key": "putUserTimeZone",
			"value": "EST",
			"type": "string"
		},
		{
			"id": "fac774cd-d149-4135-adb1-5b4e793d3e49",
			"key": "putUserVisaStatus",
			"value": "Canada-EAD",
			"type": "string"
		},
		{
			"id": "394a9e73-9039-4a71-b930-6a21fba8ea5c",
			"key": "userProgramDescription",
			"value": "Creating program for user",
			"type": "string"
		},
		{
			"id": "aa95721d-7769-49c0-8f0c-cdd9c6cc0460",
			"key": "userProgramStatus",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "bc947d28-8487-49f6-b263-4b1942a9c4b1",
			"key": "userProgramName",
			"value": "Jun23-APICollectors-SDET-",
			"type": "string"
		},
		{
			"id": "98b50a37-0aa6-4b06-adeb-33f768447792",
			"key": "userBatchDescription",
			"value": "Creating batch for user",
			"type": "string"
		},
		{
			"id": "0e9ada22-666c-4f10-8a2a-64665bbefee3",
			"key": "userBatchName",
			"value": "Jun23-APICollectors-SDET-SDET01-",
			"type": "string"
		},
		{
			"id": "4c28bf3a-64d0-40bf-ae79-f11e2dd32333",
			"key": "userBatchNoOfClasses",
			"value": "1",
			"type": "string"
		},
		{
			"id": "b19cdcbe-0a0b-4e23-8bb9-a2fff6efee55",
			"key": "userBatchStatus",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "e45dd7f0-197a-48ac-8084-a33143d3a016",
			"key": "invalidRoleId",
			"value": "Invalid role",
			"type": "string"
		},
		{
			"id": "e5d5bdb5-9c2d-4d0e-aee3-d4dcd8ff8070",
			"key": "messagePutMandatoryFirstName",
			"value": "User First Name is mandatory",
			"type": "string"
		},
		{
			"id": "08ec5271-76f6-4347-80e4-ebe4379d6369",
			"key": "messagePutMandatoryLastName",
			"value": "User Last Name is mandatory",
			"type": "string"
		},
		{
			"id": "92671c4d-42ae-4728-a76d-6ad62618ac32",
			"key": "messagePutMandatoryTimeZone",
			"value": "Failed to update user, as 'TimeZone' is invalid !! ",
			"type": "string"
		},
		{
			"id": "2ed05926-8a7e-420e-ad89-007484bdc737",
			"key": "messagePutMandatoryVisaStatus",
			"value": "Failed to update user, as 'Visa Status' is invalid !! ",
			"type": "string"
		},
		{
			"id": "9805a67a-b601-4116-9765-d46e4ffaf995",
			"key": "batchDescription",
			"value": "Postman",
			"type": "string"
		},
		{
			"id": "4ab3deb6-03fa-4a5b-92cc-ab02d781ac43",
			"key": "batchNoOfClasses",
			"value": "2",
			"type": "string"
		},
		{
			"id": "bbc02bbe-6dd9-421c-b179-f1061fc38ca4",
			"key": "batchStatus",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "e29e948f-2b52-41c5-84c3-01bbb376db7f",
			"key": "programDescriptionbatch",
			"value": "Postman",
			"type": "string"
		},
		{
			"id": "7dc606b8-17f0-4426-a44a-cd9d7b0f91f2",
			"key": "programStatusbatch",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "42c66504-d723-44f0-bfe3-dc1836057aeb",
			"key": "UpdtbatchNoOfClasses",
			"value": "4",
			"type": "string"
		},
		{
			"id": "3666fa59-d512-4137-bbb6-26157b0a7171",
			"key": "UpdtbatchStatus",
			"value": "InActive",
			"type": "string"
		},
		{
			"id": "2c9aeee0-4d69-4a72-9ab9-6835edded16c",
			"key": "UpdtbatchDescription",
			"value": "Rest Assure",
			"type": "string"
		},
		{
			"id": "d15b78eb-da40-4135-b09f-8d2d89a23e9c",
			"key": "programDescription",
			"value": "DA",
			"type": "string"
		},
		{
			"id": "2d751272-dc75-4c05-bd7a-0d04da09dd2d",
			"key": "programStatus",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "5891d76e-2ede-4b8c-af4b-dc09bad2fd32",
			"key": "UpdtprogramDescription",
			"value": "Postman",
			"type": "string"
		},
		{
			"id": "660a2612-038e-46d5-9195-53da6eba36c6",
			"key": "UpdtprogramDescription2",
			"value": "Rest Assure",
			"type": "string"
		},
		{
			"id": "6c8f0e90-cc5f-43bd-9a87-2eca929eefb6",
			"key": "programStatus1",
			"value": "WIP",
			"type": "string"
		},
		{
			"id": "f18c47d0-93f3-4aae-b1a0-338f5e46e535",
			"key": "programDescription2",
			"value": "TestData",
			"type": "string"
		},
		{
			"id": "9aa3ec95-25a8-4a74-860a-b57db674422a",
			"key": "programName2",
			"value": "June23-API_Collectors-Hackathon-05",
			"type": "string"
		},
		{
			"id": "cfa6d4aa-b95b-4181-b2f3-5c05dcae6d44",
			"key": "programStatus2",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "e196cc8c-6381-4320-b55b-1e6b3fd3326c",
			"key": "programDescription3",
			"value": "MissingData",
			"type": "string"
		},
		{
			"id": "3bad344b-0c3a-4a2a-b136-ea9908a9a0d4",
			"key": "programDescription1",
			"value": "Tests",
			"type": "string"
		},
		{
			"id": "6009e349-2130-4bfb-98a9-a5332e6ea4ea",
			"key": "programName1",
			"value": "June23-API_Collectors-Hackathon-01",
			"type": "string"
		},
		{
			"id": "31bd4c34-b210-473e-9c07-52b8ef3b0121",
			"key": "programName3",
			"value": "June23-API_Collectors-Hackathon-1240",
			"type": "string"
		},
		{
			"id": "a9f3e8cb-852c-46b5-982a-63349e406747",
			"key": "programStatus3",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "816c3294-5b98-4a4d-8843-e96d910de325",
			"key": "programDescription4",
			"value": "Testing",
			"type": "string"
		},
		{
			"id": "402cde30-33f0-4358-91ff-30a8dc5bd857",
			"key": "programName4",
			"value": "June23-API_Collectors-Hackathon-15",
			"type": "string"
		},
		{
			"id": "a16d7568-2762-4d74-9076-59e042567bac",
			"key": "programStatus4",
			"value": "active",
			"type": "string"
		},
		{
			"id": "87b7e26b-061e-4057-96b4-59c8029e0c2d",
			"key": "UpdatepgmDesc",
			"value": "APITesting",
			"type": "string"
		},
		{
			"id": "bb841afa-7348-4abe-a81d-5e9e73670abb",
			"key": "assignmentId",
			"value": "643"
		},
		{
			"id": "04029c2d-6615-4a4b-bb31-d4e8ed20f397",
			"key": "invalidID",
			"value": "12",
			"type": "string"
		},
		{
			"id": "146116f1-0fd1-40df-b013-894b7c5fea55",
			"key": "Admin",
			"value": "R01",
			"type": "string"
		},
		{
			"id": "2e4c9445-249e-4525-9002-3bc49dfb3656",
			"key": "Staff",
			"value": "R02",
			"type": "string"
		},
		{
			"id": "26d96284-878b-4f52-94be-4a811d6f6ae7",
			"key": "Student",
			"value": "R03",
			"type": "string"
		},
		{
			"id": "f58acb20-648e-4680-b2a3-e96b21275ffa",
			"key": "Status1",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "a2578632-0b0c-4943-be5f-0ff3369d9246",
			"key": "Status2",
			"value": "Inactive",
			"type": "string"
		},
		{
			"id": "9957e71a-49a8-4789-9cb3-b268b95d48ed",
			"key": "programName",
			"value": "Jun23-APICollectors-SDET-"
		},
		{
			"id": "54750dec-3c3a-4be2-9832-eb94978ecc09",
			"key": "programDesc",
			"value": "Test Data for Hackathon",
			"type": "string"
		},
		{
			"id": "12ffe784-7f7f-4b00-bebf-79941d8c35db",
			"key": "resPgmName",
			"value": "Jun23-APICollectors-SDET-106"
		},
		{
			"id": "c7ccf02b-ad6a-49f1-8db9-dc48c4ba07a6",
			"key": "pgmStatus1",
			"value": "In Progress",
			"type": "string"
		},
		{
			"id": "28d08634-dcbd-458b-998b-0174a74d125e",
			"key": "pgmStatus2",
			"value": "Completed",
			"type": "string"
		},
		{
			"id": "77ff3566-5923-4a14-93cf-a16b584952ad",
			"key": "batchNameAssignment",
			"value": "Jun23-APICollectors-SDET-SDET01-",
			"type": "string"
		},
		{
			"id": "2bc8d984-3bb0-4b26-a215-87c6b3a8468d",
			"key": "timeZone1",
			"value": "EST",
			"type": "string"
		},
		{
			"id": "2c7cb98d-bcef-45df-a766-0fcaa520e939",
			"key": "timeZone2",
			"value": "CST",
			"type": "string"
		},
		{
			"id": "ebb181f4-c1b9-40ad-b328-770dd0dab882",
			"key": "visaStatus1",
			"value": "H4-EAD",
			"type": "string"
		},
		{
			"id": "1d78520a-7d0e-4df1-9103-c0ca9b922f01",
			"key": "visaStatus2",
			"value": "GC-EAD",
			"type": "string"
		},
		{
			"id": "e8744847-405e-466d-ba10-c851c1403b28",
			"key": "visaStatus3",
			"value": "US-Citizen",
			"type": "string"
		},
		{
			"id": "343825ba-fdcd-46fb-aaa8-0a97ee03f102",
			"key": "userComment",
			"value": "Creating User",
			"type": "string"
		},
		{
			"id": "64f65328-87f1-4d05-b641-af81e61476c6",
			"key": "batchDesc",
			"value": "Postman Hackathon batch",
			"type": "string"
		},
		{
			"id": "6b8f5d39-c38f-4aa2-9cbc-a62a1f519ea4",
			"key": "assignmentName",
			"value": "Jun23-APICollectors-SDET-JAVA-",
			"type": "string"
		},
		{
			"id": "c83f1355-3f94-4804-afd0-2a456306f21d",
			"key": "firstName",
			"value": "APICollectors_",
			"type": "string"
		},
		{
			"id": "2e53e313-5b9c-4d7a-9165-37a119839c38",
			"key": "userId",
			"value": "U4413",
			"type": "string"
		},
		{
			"id": "2e4b5ca4-52a8-497f-8eff-7f17a79a9f40",
			"key": "assignmentDesc1",
			"value": "Hackathon Testing ",
			"type": "string"
		},
		{
			"id": "0a4fca8e-ea5e-4b4b-9351-853e8dc17e14",
			"key": "assignmentDesc2",
			"value": "SQL Bootcamp Assignment",
			"type": "string"
		},
		{
			"id": "35eb6a4e-052c-4953-8aa9-830e9ec33a16",
			"key": "assignmentDesc3",
			"value": "Cucumber BDD Assignment",
			"type": "string"
		},
		{
			"id": "44cf3d4d-16c4-4362-ad71-2637a7ebf990",
			"key": "comments",
			"value": "Test Data",
			"type": "string"
		},
		{
			"id": "4492e57b-f927-439d-9961-4a044b9c0134",
			"key": "postDueDate",
			"value": "06-26-2023 17:20:00",
			"type": "string"
		},
		{
			"id": "dab873d9-9426-4aeb-aa42-9e415eb82abc",
			"key": "filepath1",
			"value": "file1.json",
			"type": "string"
		},
		{
			"id": "ba1b959d-01a9-4713-ac5a-74dcce1702ff",
			"key": "filepath2",
			"value": "file2.json",
			"type": "string"
		},
		{
			"id": "0de2d132-c138-47cb-b916-f47f728ef650",
			"key": "filepath3",
			"value": "file3.json",
			"type": "string"
		},
		{
			"id": "1fce5a64-74fe-48da-a63d-43c4a54a6404",
			"key": "filepath4",
			"value": "file4.json",
			"type": "string"
		},
		{
			"id": "f361c3eb-3b29-4991-b727-fe73b66a29e1",
			"key": "filepath5",
			"value": "file5.json",
			"type": "string"
		},
		{
			"id": "9aa16fc2-ca28-407c-8457-fb55a061dada",
			"key": "linkedinUrl",
			"value": "team@linkedin.com",
			"type": "string"
		},
		{
			"id": "394db23d-4b74-4f51-949f-cd7479c39d2e",
			"key": "serial",
			"value": "106",
			"type": "string"
		},
		{
			"id": "985de417-380d-4992-bac3-163e694593d2",
			"key": "subComments",
			"value": "Submitted successfully",
			"type": "string"
		},
		{
			"id": "f9e8152a-80f5-4e94-bb18-e99f9e8e0bbc",
			"key": "resubmitComments",
			"value": "Resubmitted successfully",
			"type": "string"
		},
		{
			"id": "c7dc54bb-5383-4819-b318-e185e2e842f2",
			"key": "invalidBatchId",
			"value": "31012",
			"type": "string"
		},
		{
			"id": "bfe00b6c-7e8e-4c7c-a7fa-8b61fde9e525",
			"key": "postDueId",
			"value": "1074",
			"type": "string"
		},
		{
			"id": "1b90fdf3-b412-494c-bd72-c3e5249fbf53",
			"key": "lastName",
			"value": "Test",
			"type": "string"
		},
		{
			"id": "c24fc8d6-f8f8-4d53-8f17-1dc5b6d2cfda",
			"key": "UG",
			"value": "ug",
			"type": "string"
		},
		{
			"id": "6e1ef172-8710-40f2-b739-d4e7995cee2b",
			"key": "PG",
			"value": "pg",
			"type": "string"
		},
		{
			"id": "91bcffe6-ffd9-4959-82f8-142ef32b8417",
			"key": "phoneNumber",
			"value": "{{randomNumber}}",
			"type": "string"
		},
		{
			"id": "ea8179ca-c4ea-42be-971f-0ac3fba2913c",
			"key": "studentId",
			"value": ""
		},
		{
			"id": "b556a2cf-9fcf-4be0-af6f-2b3a3314359f",
			"key": "studentPhoneNumber",
			"value": "{{randomNumber}}",
			"type": "string"
		},
		{
			"id": "abe3b1e0-36d1-41c2-a342-d9ec5b642d64",
			"key": "assignmentDescription",
			"value": "API basics -phase1",
			"type": "string"
		},
		{
			"id": "7a6bbd61-0012-4d97-9fa7-528048cc3c46",
			"key": "assignmentName",
			"value": "Jun23-APICollectors_SDET_97 : Postman intro part : {{assignmentname}}",
			"type": "string"
		},
		{
			"id": "5f1ebf8f-1bc1-443f-8060-9045bd01f343",
			"key": "comments",
			"value": "Practice this assignment",
			"type": "string"
		},
		{
			"id": "bd96252e-80bc-4014-bfbd-b931a76ac4cb",
			"key": "createdBy",
			"value": "U696",
			"type": "string"
		},
		{
			"id": "6bc661ec-0914-4803-b412-a18a7e8c3c9f",
			"key": "dueDate",
			"value": "2023-06-29T23:44:31.377+00:00",
			"type": "string"
		},
		{
			"id": "da0267bc-e072-4866-a74c-cd64fb38f117",
			"key": "pathAttachment1",
			"value": "pathfile1.json",
			"type": "string"
		},
		{
			"id": "f2513316-fbf7-4c4f-bf08-1a59bc646781",
			"key": "pathAttachment2",
			"value": "pathfile2.json",
			"type": "string"
		},
		{
			"id": "3cb21ac5-2dbd-428f-9640-ffe0de3ed5b6",
			"key": "pathAttachment3",
			"value": "pathfile3.json",
			"type": "string"
		},
		{
			"id": "83e16b87-f4c5-41a6-9d4f-be22ddeb0ca6",
			"key": "batchNA",
			"value": "99999",
			"type": "string"
		},
		{
			"id": "a6eba5fa-8893-404a-a269-335d778111d2",
			"key": "batchInvalid",
			"value": "xyz",
			"type": "string"
		},
		{
			"id": "15809d83-f893-469d-b3c9-dbb271e25916",
			"key": "nonexistantassignmentId",
			"value": "99999",
			"type": "string"
		},
		{
			"id": "388ff8ff-9e4e-49e7-b3d4-ae8f4021e291",
			"key": "invalidId",
			"value": "abc",
			"type": "string"
		},
		{
			"id": "80730152-6e48-4c1b-9c42-11bb17c1b48a",
			"key": "graderId",
			"value": "U696",
			"type": "string"
		},
		{
			"id": "3bc85184-93d6-4a83-9f4b-e309c1c8d050",
			"key": "pathAttachment5",
			"value": "pathfile3.json",
			"type": "string"
		},
		{
			"id": "2e6730fe-2215-4d6d-9e8a-c49efb5f48ae",
			"key": "pathAttachment4",
			"value": "pathfile4.json",
			"type": "string"
		},
		{
			"id": "8d17e344-dd7f-4ba5-b9c1-19b94d5b7aa8",
			"key": "batchwithnoassignment",
			"value": "1343",
			"type": "string"
		},
		{
			"id": "9b3aec46-812a-4cf6-ab19-6d49abf4a9f0",
			"key": "duplicateAssignment",
			"value": "621",
			"type": "string"
		},
		{
			"id": "6ef93909-2670-4d42-8dd9-4e420e1fcec7",
			"key": "updateId",
			"value": "621",
			"type": "string"
		},
		{
			"id": "4339fae4-6fa7-4754-ade7-fc2fe0b944a0",
			"key": "invalidGrader",
			"value": "99999",
			"type": "string"
		},
		{
			"id": "29cdafce-3569-47cb-a668-bdd36eea4ba8",
			"key": "invalidDate",
			"value": "20-06-29T23:44:31.377+00:00",
			"type": "string"
		},
		{
			"id": "e91223b7-be60-45bb-be45-420436caa4a5",
			"key": "programDescriptionAssign",
			"value": "Phase1 : part{{programnumber}}",
			"type": "string"
		},
		{
			"id": "e66e9455-b065-4882-b0ac-e7a3fbfec4ce",
			"key": "programNameAssign",
			"value": "Jun23-APICollectors_SDET_97 : {{programnumber}}",
			"type": "string"
		},
		{
			"id": "cafa882b-3f2b-4005-a4a4-86d0c93b6f60",
			"key": "programStatusAssign",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "651e0981-5fc0-4ce0-b20c-db624f49f048",
			"key": "batchDescriptionAssign",
			"value": "API-collectors-Batch2",
			"type": "string"
		},
		{
			"id": "a8b0a48b-6905-47da-9336-39d0e57a8302",
			"key": "batchNameAssign",
			"value": "P1B1",
			"type": "string"
		},
		{
			"id": "00e8d9ef-3a02-4894-a7f0-3e7bf4a65241",
			"key": "batchNoOfClassesAssign",
			"value": "3",
			"type": "string"
		},
		{
			"id": "2a47c6bb-3956-43a0-a1c1-47ca384cd6c6",
			"key": "updatecomments",
			"value": "This comment is updated",
			"type": "string"
		},
		{
			"id": "631e41dd-74ba-4449-bfd2-fce4141177b5",
			"key": "duplicateAsnname",
			"value": "Postman intro part : 70",
			"type": "string"
		},
		{
			"id": "16995cc9-f6cc-437e-9a0f-362a460e79e6",
			"key": "batchStatusAssign",
			"value": "On",
			"type": "string"
		},
		{
			"id": "7a591342-d1c1-4449-96a7-5a3f97062f37",
			"key": "userEduUg",
			"value": "Diploma",
			"type": "string"
		},
		{
			"id": "22b9f427-5264-4567-85f2-aa3c6bfaf61c",
			"key": "userFirstName",
			"value": "Numpy",
			"type": "string"
		},
		{
			"id": "7e5f9f50-2f5b-44ad-b8f4-01b8d25a1487",
			"key": "userLastName",
			"value": "Ninja",
			"type": "string"
		},
		{
			"id": "33793e3d-63a2-4d47-9145-87ed8a170956",
			"key": "userLinkedinUrl",
			"value": "testapi.com",
			"type": "string"
		},
		{
			"id": "825ec307-f0a0-4ea1-b43d-86576b35b50f",
			"key": "userLocation",
			"value": "USA",
			"type": "string"
		},
		{
			"id": "6af02cce-0a6a-46b1-927e-abecd1b93417",
			"key": "userMiddleName",
			"value": "A",
			"type": "string"
		},
		{
			"id": "7f4e252a-d8d2-4466-bb64-d2d475b02ad8",
			"key": "roleId",
			"value": "R01",
			"type": "string"
		},
		{
			"id": "46aeb55d-5827-4406-9b69-8df271322113",
			"key": "userRoleStatus",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "0edba041-0935-42ce-b09d-c80406dca740",
			"key": "userTimeZone",
			"value": "PST",
			"type": "string"
		},
		{
			"id": "f4e8cb64-351e-4ccc-9169-2bc930d19d85",
			"key": "userVisaStatus",
			"value": "H4-EAD",
			"type": "string"
		},
		{
			"id": "70eee79b-940a-42b6-be68-e534c64b1e8c",
			"key": "userRoleStatusInactive",
			"value": "Inactive",
			"type": "string"
		},
		{
			"id": "0e891d4a-ea94-471c-bbc9-8fa7625f072c",
			"key": "programId",
			"value": ""
		}
	]
}